{"file":[{"name":"elide/base/language.proto","package":"base","messageType":[{"name":"LanguageSpec","field":[{"name":"language","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".base.Language","oneofIndex":0,"jsonName":"language"},{"name":"iso_language","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","oneofIndex":0,"jsonName":"isoLanguage"},{"name":"iso_country","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","oneofIndex":1,"jsonName":"isoCountry"},{"name":"dialect","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","oneofIndex":1,"jsonName":"dialect"}],"oneofDecl":[{"name":"selection"},{"name":"modifier"}]}],"enumType":[{"name":"Language","value":[{"name":"ENGLISH","number":0},{"name":"FRENCH","number":1},{"name":"SPANISH","number":2},{"name":"CHINESE","number":3},{"name":"CHINESE_MANDARIN","number":4},{"name":"CHINESE_CANTONESE","number":5}]}],"options":{"javaPackage":"tools.elide.base","javaOuterClassname":"BaseLanguage","javaMultipleFiles":true,"javaStringCheckUtf8":true,"optimizeFor":"SPEED","goPackage":"github.com/elide-tools/elide/base","ccEnableArenas":true,"objcClassPrefix":"ELD","csharpNamespace":"Elide.Base","swiftPrefix":"Elide","phpClassPrefix":"ELD","phpNamespace":"Elide","rubyPackage":"Elide::Base"},"sourceCodeInfo":{"location":[{"span":[17,0,78,1]},{"path":[12],"span":[17,0,18],"leadingComments":"\n Defines basic framework structures related to modelling human language. These structures are render-able by the Soy\n templates stored alongside them, and are used for various things throughout the codebase.\n","leadingDetachedComments":["\n Copyright © 2022, The Elide Framework Authors. All rights reserved.\n\n The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,\n are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of\n this code in object or source form requires and implies consent and agreement to that license in principle and\n practice. Source or object code not listing this header, or unless specified otherwise, remain the property of\n Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to\n Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected\n by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,\n is strictly forbidden except in adherence with assigned license requirements.\n"]},{"path":[2],"span":[18,0,13]},{"path":[8],"span":[20,0,28]},{"path":[8,9],"span":[20,0,28]},{"path":[8],"span":[21,0,31]},{"path":[8,31],"span":[21,0,31]},{"path":[8],"span":[22,0,34]},{"path":[8,10],"span":[22,0,34]},{"path":[8],"span":[23,0,37]},{"path":[8,27],"span":[23,0,37]},{"path":[8],"span":[24,0,45]},{"path":[8,8],"span":[24,0,45]},{"path":[8],"span":[25,0,31]},{"path":[8,41],"span":[25,0,31]},{"path":[8],"span":[26,0,32]},{"path":[8,40],"span":[26,0,32]},{"path":[8],"span":[27,0,30]},{"path":[8,39],"span":[27,0,30]},{"path":[8],"span":[28,0,33]},{"path":[8,36],"span":[28,0,33]},{"path":[8],"span":[29,0,36]},{"path":[8,45],"span":[29,0,36]},{"path":[8],"span":[30,0,41]},{"path":[8,1],"span":[30,0,41]},{"path":[8],"span":[31,0,39]},{"path":[8,37],"span":[31,0,39]},{"path":[8],"span":[32,0,56]},{"path":[8,11],"span":[32,0,56]},{"path":[5,0],"span":[38,0,56,1],"leadingComments":" Specifies common/major languages present in software development or the open internet. This is not an exhaustive list\n and if you need to specify an entry that isn't present (without a code change), it is best to opt for the `iso_`-\n prefixed fields in `LanguageSpec`.\n"},{"path":[5,0,1],"span":[38,5,13]},{"path":[5,0,2,0],"span":[40,2,14],"leadingComments":" Generic, unqualified reference to English.\n"},{"path":[5,0,2,0,1],"span":[40,2,9]},{"path":[5,0,2,0,2],"span":[40,12,13]},{"path":[5,0,2,1],"span":[43,2,13],"leadingComments":" Traditional French.\n"},{"path":[5,0,2,1,1],"span":[43,2,8]},{"path":[5,0,2,1,2],"span":[43,11,12]},{"path":[5,0,2,2],"span":[46,2,14],"leadingComments":" Generic, unqualified reference to Spanish.\n"},{"path":[5,0,2,2,1],"span":[46,2,9]},{"path":[5,0,2,2,2],"span":[46,12,13]},{"path":[5,0,2,3],"span":[49,2,14],"leadingComments":" Generic, unqualified reference to Chinese.\n"},{"path":[5,0,2,3,1],"span":[49,2,9]},{"path":[5,0,2,3,2],"span":[49,12,13]},{"path":[5,0,2,4],"span":[52,2,23],"leadingComments":" Specific reference to Mandarin Chinese.\n"},{"path":[5,0,2,4,1],"span":[52,2,18]},{"path":[5,0,2,4,2],"span":[52,21,22]},{"path":[5,0,2,5],"span":[55,2,24],"leadingComments":" Specific reference to Cantonese.\n"},{"path":[5,0,2,5,1],"span":[55,2,19]},{"path":[5,0,2,5,2],"span":[55,22,23]},{"path":[4,0],"span":[59,0,78,1],"leadingComments":" Specifies a given language, along with a nationality for that language.\n"},{"path":[4,0,1],"span":[59,8,20]},{"path":[4,0,8,0],"span":[61,2,68,3],"leadingComments":" Specifies a language either via the enumerated specifier, or the proper two-character ISO code for the language.\n"},{"path":[4,0,8,0,1],"span":[61,8,17]},{"path":[4,0,2,0],"span":[63,4,26],"leadingComments":" Enumerated language specifier.\n"},{"path":[4,0,2,0,6],"span":[63,4,12]},{"path":[4,0,2,0,1],"span":[63,13,21]},{"path":[4,0,2,0,3],"span":[63,24,25]},{"path":[4,0,2,1],"span":[67,4,28],"leadingComments":" Two-character ISO-standard language specifier (for example: \"EN\" for English, \"FR\" for French). Casing doesn't\n matter but upper-casing should be preferred for consistency.\n"},{"path":[4,0,2,1,5],"span":[67,4,10]},{"path":[4,0,2,1,1],"span":[67,11,23]},{"path":[4,0,2,1,3],"span":[67,26,27]},{"path":[4,0,8,1],"span":[71,2,77,3],"leadingComments":" Specifies an optional modifier for a given language `selection`.\n"},{"path":[4,0,8,1,1],"span":[71,8,16]},{"path":[4,0,2,2],"span":[73,4,27],"leadingComments":" Two-character ISO-standard country code, used as a modifier for a language spec (i.e. the `us` in `en-us`).\n"},{"path":[4,0,2,2,5],"span":[73,4,10]},{"path":[4,0,2,2,1],"span":[73,11,22]},{"path":[4,0,2,2,3],"span":[73,25,26]},{"path":[4,0,2,3],"span":[76,4,23],"leadingComments":" Dialect to specify as part of this language spec, based on a simple two-character string.\n"},{"path":[4,0,2,3,5],"span":[76,4,10]},{"path":[4,0,2,3,1],"span":[76,11,18]},{"path":[4,0,2,3,3],"span":[76,21,22]}]},"syntax":"proto3","bufExtension":{"isImport":false,"moduleInfo":{"name":{"remote":"buf.build","owner":"elide","repository":"v3"}},"isSyntaxUnspecified":false}},{"name":"elide/crypto/crypto.proto","package":"crypto","enumType":[{"name":"HashAlgorithm","value":[{"name":"IDENTITY","number":0},{"name":"MD5","number":1},{"name":"SHA1","number":2},{"name":"SHA256","number":3},{"name":"SHA512","number":4},{"name":"SHA3_224","number":5},{"name":"SHA3_256","number":6},{"name":"SHA3_512","number":7}]}],"options":{"javaPackage":"tools.elide.crypto","javaMultipleFiles":true,"javaStringCheckUtf8":true,"optimizeFor":"SPEED","goPackage":"github.com/elide-tools/elide/crypto;crypto","ccEnableArenas":true,"objcClassPrefix":"ELD","csharpNamespace":"Elide.Crypto","swiftPrefix":"Elide","phpClassPrefix":"ELD","phpNamespace":"Elide\\Crypto","rubyPackage":"Elide::Crypto"},"sourceCodeInfo":{"location":[{"span":[17,0,60,1]},{"path":[12],"span":[17,0,18],"leadingComments":"\n Specifies core structures related to cryptographic operations and primitives. These records and enumerates are used\n throughout the codebase as a standard base set of definitions for hashing, encryption, and more.\n","leadingDetachedComments":["\n Copyright © 2022, The Elide Framework Authors. All rights reserved.\n\n The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,\n are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of\n this code in object or source form requires and implies consent and agreement to that license in principle and\n practice. Source or object code not listing this header, or unless specified otherwise, remain the property of\n Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to\n Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected\n by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,\n is strictly forbidden except in adherence with assigned license requirements.\n"]},{"path":[2],"span":[18,0,15]},{"path":[8],"span":[20,0,28]},{"path":[8,9],"span":[20,0,28]},{"path":[8],"span":[21,0,31]},{"path":[8,31],"span":[21,0,31]},{"path":[8],"span":[22,0,34]},{"path":[8,10],"span":[22,0,34]},{"path":[8],"span":[23,0,37]},{"path":[8,27],"span":[23,0,37]},{"path":[8],"span":[24,0,39]},{"path":[8,41],"span":[24,0,39]},{"path":[8],"span":[25,0,32]},{"path":[8,40],"span":[25,0,32]},{"path":[8],"span":[26,0,30]},{"path":[8,39],"span":[26,0,30]},{"path":[8],"span":[27,0,33]},{"path":[8,36],"span":[27,0,33]},{"path":[8],"span":[28,0,38]},{"path":[8,45],"span":[28,0,38]},{"path":[8],"span":[29,0,43]},{"path":[8,1],"span":[29,0,43]},{"path":[8],"span":[30,0,41]},{"path":[8,37],"span":[30,0,41]},{"path":[8],"span":[31,0,65]},{"path":[8,11],"span":[31,0,65]},{"path":[5,0],"span":[36,0,60,1],"leadingComments":" Specifies hash algorithms supported by the asset manifest code. We keep a token for this around so that we can\n easily detect configuration changes and make evictions accordingly.\n"},{"path":[5,0,1],"span":[36,5,18]},{"path":[5,0,2,0],"span":[38,2,15],"leadingComments":" No hash algorithm was/is active.\n"},{"path":[5,0,2,0,1],"span":[38,2,10]},{"path":[5,0,2,0,2],"span":[38,13,14]},{"path":[5,0,2,1],"span":[41,2,10],"leadingComments":" Use MD5 for chunk hashing.\n"},{"path":[5,0,2,1,1],"span":[41,2,5]},{"path":[5,0,2,1,2],"span":[41,8,9]},{"path":[5,0,2,2],"span":[44,2,11],"leadingComments":" Use SHA1 for chunk hashing.\n"},{"path":[5,0,2,2,1],"span":[44,2,6]},{"path":[5,0,2,2,2],"span":[44,9,10]},{"path":[5,0,2,3],"span":[47,2,13],"leadingComments":" Use SHA256 for chunk hashing.\n"},{"path":[5,0,2,3,1],"span":[47,2,8]},{"path":[5,0,2,3,2],"span":[47,11,12]},{"path":[5,0,2,4],"span":[50,2,13],"leadingComments":" Use SHA512 for chunk hashing.\n"},{"path":[5,0,2,4,1],"span":[50,2,8]},{"path":[5,0,2,4,2],"span":[50,11,12]},{"path":[5,0,2,5],"span":[53,2,15],"leadingComments":" Use SHA3-224 for chunk hashing.\n"},{"path":[5,0,2,5,1],"span":[53,2,10]},{"path":[5,0,2,5,2],"span":[53,13,14]},{"path":[5,0,2,6],"span":[56,2,15],"leadingComments":" Use SHA3-256 for chunk hashing.\n"},{"path":[5,0,2,6,1],"span":[56,2,10]},{"path":[5,0,2,6,2],"span":[56,13,14]},{"path":[5,0,2,7],"span":[59,2,15],"leadingComments":" Use SHA3-512 for chunk hashing.\n"},{"path":[5,0,2,7,1],"span":[59,2,10]},{"path":[5,0,2,7,2],"span":[59,13,14]}]},"syntax":"proto3","bufExtension":{"isImport":false,"moduleInfo":{"name":{"remote":"buf.build","owner":"elide","repository":"v3"}},"isSyntaxUnspecified":false}},{"name":"elide/data/data.proto","package":"data","dependency":["elide/crypto/crypto.proto"],"messageType":[{"name":"DataFingerprint","field":[{"name":"hash","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".crypto.HashAlgorithm","jsonName":"hash"},{"name":"salt","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_BYTES","jsonName":"salt"},{"name":"fingerprint","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_BYTES","jsonName":"fingerprint"}]},{"name":"DataContainer","field":[{"name":"raw","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_BYTES","jsonName":"raw"},{"name":"integrity","number":2,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".data.DataFingerprint","jsonName":"integrity"}]},{"name":"CompressedData","field":[{"name":"compression","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".data.CompressionMode","jsonName":"compression"},{"name":"data","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".data.DataContainer","jsonName":"data"},{"name":"size","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_UINT64","jsonName":"size"},{"name":"integrity","number":4,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".data.DataFingerprint","jsonName":"integrity"}]}],"enumType":[{"name":"CompressionMode","value":[{"name":"IDENTITY","number":0},{"name":"GZIP","number":1},{"name":"BROTLI","number":2}]}],"options":{"javaPackage":"tools.elide.data","javaMultipleFiles":true,"javaStringCheckUtf8":true,"optimizeFor":"SPEED","goPackage":"github.com/elide-tools/elide/data;data","ccEnableArenas":true,"objcClassPrefix":"ELD","csharpNamespace":"Elide.Data","swiftPrefix":"Elide","phpClassPrefix":"ELD","phpNamespace":"Elide\\Data","rubyPackage":"Elide::Data"},"sourceCodeInfo":{"location":[{"span":[17,0,94,1]},{"path":[12],"span":[17,0,18],"leadingComments":"\n Specifies core structures related to cryptographic operations and primitives. These records and enumerates are used\n throughout the codebase as a standard base set of definitions for hashing, encryption, and more.\n","leadingDetachedComments":["\n Copyright © 2022, The Elide Framework Authors. All rights reserved.\n\n The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,\n are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of\n this code in object or source form requires and implies consent and agreement to that license in principle and\n practice. Source or object code not listing this header, or unless specified otherwise, remain the property of\n Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to\n Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected\n by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,\n is strictly forbidden except in adherence with assigned license requirements.\n"]},{"path":[2],"span":[18,0,13]},{"path":[8],"span":[20,0,28]},{"path":[8,9],"span":[20,0,28]},{"path":[8],"span":[21,0,31]},{"path":[8,31],"span":[21,0,31]},{"path":[8],"span":[22,0,34]},{"path":[8,10],"span":[22,0,34]},{"path":[8],"span":[23,0,37]},{"path":[8,27],"span":[23,0,37]},{"path":[8],"span":[24,0,37]},{"path":[8,41],"span":[24,0,37]},{"path":[8],"span":[25,0,32]},{"path":[8,40],"span":[25,0,32]},{"path":[8],"span":[26,0,30]},{"path":[8,39],"span":[26,0,30]},{"path":[8],"span":[27,0,33]},{"path":[8,36],"span":[27,0,33]},{"path":[8],"span":[28,0,36]},{"path":[8,45],"span":[28,0,36]},{"path":[8],"span":[29,0,41]},{"path":[8,1],"span":[29,0,41]},{"path":[8],"span":[30,0,39]},{"path":[8,37],"span":[30,0,39]},{"path":[8],"span":[31,0,61]},{"path":[8,11],"span":[31,0,61]},{"path":[3,0],"span":[33,0,35]},{"path":[5,0],"span":[38,0,47,1],"leadingComments":" Specifies compression modes that are supported by the framework for pre-compressed assets stored inline within the\n manifest. These inlined assets do not replace original source assets, which are enclosed in the resource JAR.\n"},{"path":[5,0,1],"span":[38,5,20]},{"path":[5,0,2,0],"span":[40,2,15],"leadingComments":" No compression.\n"},{"path":[5,0,2,0,1],"span":[40,2,10]},{"path":[5,0,2,0,2],"span":[40,13,14]},{"path":[5,0,2,1],"span":[43,2,11],"leadingComments":" Standard gzip-based pre-compression.\n"},{"path":[5,0,2,1,1],"span":[43,2,6]},{"path":[5,0,2,1,2],"span":[43,9,10]},{"path":[5,0,2,2],"span":[46,2,13],"leadingComments":" Brotli-based pre-compression.\n"},{"path":[5,0,2,2,1],"span":[46,2,8]},{"path":[5,0,2,2,2],"span":[46,11,12]},{"path":[4,0],"span":[52,0,62,1],"leadingComments":" Stores a generic cryptographic fingerprint of some arbitrary data. This is a utility record, which simply gathers the\n specification of a hash algorithm with a raw data field storing the result of the hash.\n"},{"path":[4,0,1],"span":[52,8,23]},{"path":[4,0,2,0],"span":[54,2,32],"leadingComments":" Algorithm in use when fingerprinting the associated data.\n"},{"path":[4,0,2,0,6],"span":[54,2,22]},{"path":[4,0,2,0,1],"span":[54,23,27]},{"path":[4,0,2,0,3],"span":[54,30,31]},{"path":[4,0,2,1],"span":[58,2,17],"leadingComments":" Salt value used when fingerprinting the associated data, if applicable. Generally appended to the end of the data\n to be fingerprinted.\n"},{"path":[4,0,2,1,5],"span":[58,2,7]},{"path":[4,0,2,1,1],"span":[58,8,12]},{"path":[4,0,2,1,3],"span":[58,15,16]},{"path":[4,0,2,2],"span":[61,2,24],"leadingComments":" Content of the fingerprint/checksum calculated as part of this data fingerprint.\n"},{"path":[4,0,2,2,5],"span":[61,2,7]},{"path":[4,0,2,2,1],"span":[61,8,19]},{"path":[4,0,2,2,3],"span":[61,22,23]},{"path":[4,1],"span":[67,0,74,1],"leadingComments":" Specifies an arbitrary container, which is used to hold raw data, along with the optional specification of a\n cryptographic fingerprint calculated from the data.\n"},{"path":[4,1,1],"span":[67,8,21]},{"path":[4,1,2,0],"span":[69,2,16],"leadingComments":" Raw bytes for the data referenced by this container.\n"},{"path":[4,1,2,0,5],"span":[69,2,7]},{"path":[4,1,2,0,1],"span":[69,8,11]},{"path":[4,1,2,0,3],"span":[69,14,15]},{"path":[4,1,2,1],"span":[73,2,41],"leadingComments":" Specifies an (optional) integrity fingerprint that may be used to verify the consistency of the underlying data\n held by this data container.\n"},{"path":[4,1,2,1,4],"span":[73,2,10]},{"path":[4,1,2,1,6],"span":[73,11,26]},{"path":[4,1,2,1,1],"span":[73,27,36]},{"path":[4,1,2,1,3],"span":[73,39,40]},{"path":[4,2],"span":[79,0,94,1],"leadingComments":" Generic container for compressed data, which simply combines an enumerated `CompressionMode` with a blob of raw bytes\n which are expected to be compressed by the specified algorithm or tool.\n"},{"path":[4,2,1],"span":[79,8,22]},{"path":[4,2,2,0],"span":[81,2,34],"leadingComments":" Compression mode applied to this data. If no compression is active, `IDENTITY` may be specified as a default.\n"},{"path":[4,2,2,0,6],"span":[81,2,17]},{"path":[4,2,2,0,1],"span":[81,18,29]},{"path":[4,2,2,0,3],"span":[81,32,33]},{"path":[4,2,2,1],"span":[85,2,25],"leadingComments":" Container holding the raw compressed data, and a fingerprint of the data in compressed form. This is unmodified raw\n bytes, aside from being compressed by the algorithm specified by `compression`.\n"},{"path":[4,2,2,1,6],"span":[85,2,15]},{"path":[4,2,2,1,1],"span":[85,16,20]},{"path":[4,2,2,1,3],"span":[85,23,24]},{"path":[4,2,2,2],"span":[89,2,18],"leadingComments":" Size of the asset data before compression. To obtain the size of the data in compressed form, simply take the\n length of the data field itself. This value is expressed in bytes.\n"},{"path":[4,2,2,2,5],"span":[89,2,8]},{"path":[4,2,2,2,1],"span":[89,9,13]},{"path":[4,2,2,2,3],"span":[89,16,17]},{"path":[4,2,2,3],"span":[93,2,41],"leadingComments":" Holds an (optional) integrity fingerprint, calculated from the held data *before* compression, which maybe used to\n verify the consistency of the data held by this container after de-compression.\n"},{"path":[4,2,2,3,4],"span":[93,2,10]},{"path":[4,2,2,3,6],"span":[93,11,26]},{"path":[4,2,2,3,1],"span":[93,27,36]},{"path":[4,2,2,3,3],"span":[93,39,40]}]},"syntax":"proto3","bufExtension":{"isImport":false,"moduleInfo":{"name":{"remote":"buf.build","owner":"elide","repository":"v3"}},"isSyntaxUnspecified":false}},{"name":"google/protobuf/descriptor.proto","package":"google.protobuf","messageType":[{"name":"FileDescriptorSet","field":[{"name":"file","number":1,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.FileDescriptorProto","jsonName":"file"}]},{"name":"FileDescriptorProto","field":[{"name":"name","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"name"},{"name":"package","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"package"},{"name":"dependency","number":3,"label":"LABEL_REPEATED","type":"TYPE_STRING","jsonName":"dependency"},{"name":"public_dependency","number":10,"label":"LABEL_REPEATED","type":"TYPE_INT32","jsonName":"publicDependency"},{"name":"weak_dependency","number":11,"label":"LABEL_REPEATED","type":"TYPE_INT32","jsonName":"weakDependency"},{"name":"message_type","number":4,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.DescriptorProto","jsonName":"messageType"},{"name":"enum_type","number":5,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.EnumDescriptorProto","jsonName":"enumType"},{"name":"service","number":6,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.ServiceDescriptorProto","jsonName":"service"},{"name":"extension","number":7,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.FieldDescriptorProto","jsonName":"extension"},{"name":"options","number":8,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.FileOptions","jsonName":"options"},{"name":"source_code_info","number":9,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.SourceCodeInfo","jsonName":"sourceCodeInfo"},{"name":"syntax","number":12,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"syntax"}]},{"name":"DescriptorProto","field":[{"name":"name","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"name"},{"name":"field","number":2,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.FieldDescriptorProto","jsonName":"field"},{"name":"extension","number":6,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.FieldDescriptorProto","jsonName":"extension"},{"name":"nested_type","number":3,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.DescriptorProto","jsonName":"nestedType"},{"name":"enum_type","number":4,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.EnumDescriptorProto","jsonName":"enumType"},{"name":"extension_range","number":5,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.DescriptorProto.ExtensionRange","jsonName":"extensionRange"},{"name":"oneof_decl","number":8,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.OneofDescriptorProto","jsonName":"oneofDecl"},{"name":"options","number":7,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.MessageOptions","jsonName":"options"},{"name":"reserved_range","number":9,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.DescriptorProto.ReservedRange","jsonName":"reservedRange"},{"name":"reserved_name","number":10,"label":"LABEL_REPEATED","type":"TYPE_STRING","jsonName":"reservedName"}],"nestedType":[{"name":"ExtensionRange","field":[{"name":"start","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"start"},{"name":"end","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"end"},{"name":"options","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.ExtensionRangeOptions","jsonName":"options"}]},{"name":"ReservedRange","field":[{"name":"start","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"start"},{"name":"end","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"end"}]}]},{"name":"ExtensionRangeOptions","field":[{"name":"uninterpreted_option","number":999,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.UninterpretedOption","jsonName":"uninterpretedOption"}],"extensionRange":[{"start":1000,"end":536870912}]},{"name":"FieldDescriptorProto","field":[{"name":"name","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"name"},{"name":"number","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"number"},{"name":"label","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.FieldDescriptorProto.Label","jsonName":"label"},{"name":"type","number":5,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.FieldDescriptorProto.Type","jsonName":"type"},{"name":"type_name","number":6,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"typeName"},{"name":"extendee","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"extendee"},{"name":"default_value","number":7,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"defaultValue"},{"name":"oneof_index","number":9,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"oneofIndex"},{"name":"json_name","number":10,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"jsonName"},{"name":"options","number":8,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.FieldOptions","jsonName":"options"},{"name":"proto3_optional","number":17,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"proto3Optional"}],"enumType":[{"name":"Type","value":[{"name":"TYPE_DOUBLE","number":1},{"name":"TYPE_FLOAT","number":2},{"name":"TYPE_INT64","number":3},{"name":"TYPE_UINT64","number":4},{"name":"TYPE_INT32","number":5},{"name":"TYPE_FIXED64","number":6},{"name":"TYPE_FIXED32","number":7},{"name":"TYPE_BOOL","number":8},{"name":"TYPE_STRING","number":9},{"name":"TYPE_GROUP","number":10},{"name":"TYPE_MESSAGE","number":11},{"name":"TYPE_BYTES","number":12},{"name":"TYPE_UINT32","number":13},{"name":"TYPE_ENUM","number":14},{"name":"TYPE_SFIXED32","number":15},{"name":"TYPE_SFIXED64","number":16},{"name":"TYPE_SINT32","number":17},{"name":"TYPE_SINT64","number":18}]},{"name":"Label","value":[{"name":"LABEL_OPTIONAL","number":1},{"name":"LABEL_REQUIRED","number":2},{"name":"LABEL_REPEATED","number":3}]}]},{"name":"OneofDescriptorProto","field":[{"name":"name","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"name"},{"name":"options","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.OneofOptions","jsonName":"options"}]},{"name":"EnumDescriptorProto","field":[{"name":"name","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"name"},{"name":"value","number":2,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.EnumValueDescriptorProto","jsonName":"value"},{"name":"options","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.EnumOptions","jsonName":"options"},{"name":"reserved_range","number":4,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.EnumDescriptorProto.EnumReservedRange","jsonName":"reservedRange"},{"name":"reserved_name","number":5,"label":"LABEL_REPEATED","type":"TYPE_STRING","jsonName":"reservedName"}],"nestedType":[{"name":"EnumReservedRange","field":[{"name":"start","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"start"},{"name":"end","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"end"}]}]},{"name":"EnumValueDescriptorProto","field":[{"name":"name","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"name"},{"name":"number","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"number"},{"name":"options","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.EnumValueOptions","jsonName":"options"}]},{"name":"ServiceDescriptorProto","field":[{"name":"name","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"name"},{"name":"method","number":2,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.MethodDescriptorProto","jsonName":"method"},{"name":"options","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.ServiceOptions","jsonName":"options"}]},{"name":"MethodDescriptorProto","field":[{"name":"name","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"name"},{"name":"input_type","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"inputType"},{"name":"output_type","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"outputType"},{"name":"options","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.MethodOptions","jsonName":"options"},{"name":"client_streaming","number":5,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"clientStreaming"},{"name":"server_streaming","number":6,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"serverStreaming"}]},{"name":"FileOptions","field":[{"name":"java_package","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"javaPackage"},{"name":"java_outer_classname","number":8,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"javaOuterClassname"},{"name":"java_multiple_files","number":10,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"javaMultipleFiles"},{"name":"java_generate_equals_and_hash","number":20,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"javaGenerateEqualsAndHash","options":{"deprecated":true}},{"name":"java_string_check_utf8","number":27,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"javaStringCheckUtf8"},{"name":"optimize_for","number":9,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.FileOptions.OptimizeMode","defaultValue":"SPEED","jsonName":"optimizeFor"},{"name":"go_package","number":11,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"goPackage"},{"name":"cc_generic_services","number":16,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"ccGenericServices"},{"name":"java_generic_services","number":17,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"javaGenericServices"},{"name":"py_generic_services","number":18,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"pyGenericServices"},{"name":"php_generic_services","number":42,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"phpGenericServices"},{"name":"deprecated","number":23,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"deprecated"},{"name":"cc_enable_arenas","number":31,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"true","jsonName":"ccEnableArenas"},{"name":"objc_class_prefix","number":36,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"objcClassPrefix"},{"name":"csharp_namespace","number":37,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"csharpNamespace"},{"name":"swift_prefix","number":39,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"swiftPrefix"},{"name":"php_class_prefix","number":40,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"phpClassPrefix"},{"name":"php_namespace","number":41,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"phpNamespace"},{"name":"php_metadata_namespace","number":44,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"phpMetadataNamespace"},{"name":"ruby_package","number":45,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"rubyPackage"},{"name":"uninterpreted_option","number":999,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.UninterpretedOption","jsonName":"uninterpretedOption"}],"enumType":[{"name":"OptimizeMode","value":[{"name":"SPEED","number":1},{"name":"CODE_SIZE","number":2},{"name":"LITE_RUNTIME","number":3}]}],"extensionRange":[{"start":1000,"end":536870912}],"reservedRange":[{"start":38,"end":39}]},{"name":"MessageOptions","field":[{"name":"message_set_wire_format","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"messageSetWireFormat"},{"name":"no_standard_descriptor_accessor","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"noStandardDescriptorAccessor"},{"name":"deprecated","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"deprecated"},{"name":"map_entry","number":7,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"mapEntry"},{"name":"uninterpreted_option","number":999,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.UninterpretedOption","jsonName":"uninterpretedOption"}],"extensionRange":[{"start":1000,"end":536870912}],"reservedRange":[{"start":4,"end":5},{"start":5,"end":6},{"start":6,"end":7},{"start":8,"end":9},{"start":9,"end":10}]},{"name":"FieldOptions","field":[{"name":"ctype","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.FieldOptions.CType","defaultValue":"STRING","jsonName":"ctype"},{"name":"packed","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"packed"},{"name":"jstype","number":6,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.FieldOptions.JSType","defaultValue":"JS_NORMAL","jsonName":"jstype"},{"name":"lazy","number":5,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"lazy"},{"name":"deprecated","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"deprecated"},{"name":"weak","number":10,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"weak"},{"name":"uninterpreted_option","number":999,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.UninterpretedOption","jsonName":"uninterpretedOption"}],"enumType":[{"name":"CType","value":[{"name":"STRING","number":0},{"name":"CORD","number":1},{"name":"STRING_PIECE","number":2}]},{"name":"JSType","value":[{"name":"JS_NORMAL","number":0},{"name":"JS_STRING","number":1},{"name":"JS_NUMBER","number":2}]}],"extensionRange":[{"start":1000,"end":536870912}],"reservedRange":[{"start":4,"end":5}]},{"name":"OneofOptions","field":[{"name":"uninterpreted_option","number":999,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.UninterpretedOption","jsonName":"uninterpretedOption"}],"extensionRange":[{"start":1000,"end":536870912}]},{"name":"EnumOptions","field":[{"name":"allow_alias","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"allowAlias"},{"name":"deprecated","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"deprecated"},{"name":"uninterpreted_option","number":999,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.UninterpretedOption","jsonName":"uninterpretedOption"}],"extensionRange":[{"start":1000,"end":536870912}],"reservedRange":[{"start":5,"end":6}]},{"name":"EnumValueOptions","field":[{"name":"deprecated","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"deprecated"},{"name":"uninterpreted_option","number":999,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.UninterpretedOption","jsonName":"uninterpretedOption"}],"extensionRange":[{"start":1000,"end":536870912}]},{"name":"ServiceOptions","field":[{"name":"deprecated","number":33,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"deprecated"},{"name":"uninterpreted_option","number":999,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.UninterpretedOption","jsonName":"uninterpretedOption"}],"extensionRange":[{"start":1000,"end":536870912}]},{"name":"MethodOptions","field":[{"name":"deprecated","number":33,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","defaultValue":"false","jsonName":"deprecated"},{"name":"idempotency_level","number":34,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.MethodOptions.IdempotencyLevel","defaultValue":"IDEMPOTENCY_UNKNOWN","jsonName":"idempotencyLevel"},{"name":"uninterpreted_option","number":999,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.UninterpretedOption","jsonName":"uninterpretedOption"}],"enumType":[{"name":"IdempotencyLevel","value":[{"name":"IDEMPOTENCY_UNKNOWN","number":0},{"name":"NO_SIDE_EFFECTS","number":1},{"name":"IDEMPOTENT","number":2}]}],"extensionRange":[{"start":1000,"end":536870912}]},{"name":"UninterpretedOption","field":[{"name":"name","number":2,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.UninterpretedOption.NamePart","jsonName":"name"},{"name":"identifier_value","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"identifierValue"},{"name":"positive_int_value","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_UINT64","jsonName":"positiveIntValue"},{"name":"negative_int_value","number":5,"label":"LABEL_OPTIONAL","type":"TYPE_INT64","jsonName":"negativeIntValue"},{"name":"double_value","number":6,"label":"LABEL_OPTIONAL","type":"TYPE_DOUBLE","jsonName":"doubleValue"},{"name":"string_value","number":7,"label":"LABEL_OPTIONAL","type":"TYPE_BYTES","jsonName":"stringValue"},{"name":"aggregate_value","number":8,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"aggregateValue"}],"nestedType":[{"name":"NamePart","field":[{"name":"name_part","number":1,"label":"LABEL_REQUIRED","type":"TYPE_STRING","jsonName":"namePart"},{"name":"is_extension","number":2,"label":"LABEL_REQUIRED","type":"TYPE_BOOL","jsonName":"isExtension"}]}]},{"name":"SourceCodeInfo","field":[{"name":"location","number":1,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.SourceCodeInfo.Location","jsonName":"location"}],"nestedType":[{"name":"Location","field":[{"name":"path","number":1,"label":"LABEL_REPEATED","type":"TYPE_INT32","jsonName":"path","options":{"packed":true}},{"name":"span","number":2,"label":"LABEL_REPEATED","type":"TYPE_INT32","jsonName":"span","options":{"packed":true}},{"name":"leading_comments","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"leadingComments"},{"name":"trailing_comments","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"trailingComments"},{"name":"leading_detached_comments","number":6,"label":"LABEL_REPEATED","type":"TYPE_STRING","jsonName":"leadingDetachedComments"}]}]},{"name":"GeneratedCodeInfo","field":[{"name":"annotation","number":1,"label":"LABEL_REPEATED","type":"TYPE_MESSAGE","typeName":".google.protobuf.GeneratedCodeInfo.Annotation","jsonName":"annotation"}],"nestedType":[{"name":"Annotation","field":[{"name":"path","number":1,"label":"LABEL_REPEATED","type":"TYPE_INT32","jsonName":"path","options":{"packed":true}},{"name":"source_file","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"sourceFile"},{"name":"begin","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"begin"},{"name":"end","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"end"}]}]}],"options":{"javaPackage":"com.google.protobuf","javaOuterClassname":"DescriptorProtos","optimizeFor":"SPEED","goPackage":"google.golang.org/protobuf/types/descriptorpb","ccEnableArenas":true,"objcClassPrefix":"GPB","csharpNamespace":"Google.Protobuf.Reflection"},"sourceCodeInfo":{"location":[{"span":[39,0,910,1]},{"path":[12],"span":[39,0,18],"leadingDetachedComments":[" Protocol Buffers - Google's data interchange format\n Copyright 2008 Google Inc.  All rights reserved.\n https://developers.google.com/protocol-buffers/\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n\n     * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n     * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n     * Neither the name of Google Inc. nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"," Author: kenton@google.com (Kenton Varda)\n  Based on original Protocol Buffers design by\n  Sanjay Ghemawat, Jeff Dean, and others.\n\n The messages in this file describe the definitions found in .proto files.\n A valid .proto file can be translated directly to a FileDescriptorProto\n without any other information (e.g. without reading its imports).\n"]},{"path":[2],"span":[41,0,24]},{"path":[8],"span":[43,0,68]},{"path":[8,11],"span":[43,0,68]},{"path":[8],"span":[44,0,44]},{"path":[8,1],"span":[44,0,44]},{"path":[8],"span":[45,0,49]},{"path":[8,8],"span":[45,0,49]},{"path":[8],"span":[46,0,55]},{"path":[8,37],"span":[46,0,55]},{"path":[8],"span":[47,0,33]},{"path":[8,36],"span":[47,0,33]},{"path":[8],"span":[48,0,31]},{"path":[8,31],"span":[48,0,31]},{"path":[8],"span":[52,0,28]},{"path":[8,9],"span":[52,0,28],"leadingComments":" descriptor.proto must be optimized for speed because reflection-based\n algorithms don't work during bootstrapping.\n"},{"path":[4,0],"span":[56,0,58,1],"leadingComments":" The protocol compiler can output a FileDescriptorSet containing the .proto\n files it parses.\n"},{"path":[4,0,1],"span":[56,8,25]},{"path":[4,0,2,0],"span":[57,2,40]},{"path":[4,0,2,0,4],"span":[57,2,10]},{"path":[4,0,2,0,6],"span":[57,11,30]},{"path":[4,0,2,0,1],"span":[57,31,35]},{"path":[4,0,2,0,3],"span":[57,38,39]},{"path":[4,1],"span":[61,0,90,1],"leadingComments":" Describes a complete .proto file.\n"},{"path":[4,1,1],"span":[61,8,27]},{"path":[4,1,2,0],"span":[62,2,27],"trailingComments":" file name, relative to root of source tree\n"},{"path":[4,1,2,0,4],"span":[62,2,10]},{"path":[4,1,2,0,5],"span":[62,11,17]},{"path":[4,1,2,0,1],"span":[62,18,22]},{"path":[4,1,2,0,3],"span":[62,25,26]},{"path":[4,1,2,1],"span":[63,2,30],"trailingComments":" e.g. \"foo\", \"foo.bar\", etc.\n"},{"path":[4,1,2,1,4],"span":[63,2,10]},{"path":[4,1,2,1,5],"span":[63,11,17]},{"path":[4,1,2,1,1],"span":[63,18,25]},{"path":[4,1,2,1,3],"span":[63,28,29]},{"path":[4,1,2,2],"span":[66,2,33],"leadingComments":" Names of files imported by this file.\n"},{"path":[4,1,2,2,4],"span":[66,2,10]},{"path":[4,1,2,2,5],"span":[66,11,17]},{"path":[4,1,2,2,1],"span":[66,18,28]},{"path":[4,1,2,2,3],"span":[66,31,32]},{"path":[4,1,2,3],"span":[68,2,40],"leadingComments":" Indexes of the public imported files in the dependency list above.\n"},{"path":[4,1,2,3,4],"span":[68,2,10]},{"path":[4,1,2,3,5],"span":[68,11,16]},{"path":[4,1,2,3,1],"span":[68,17,34]},{"path":[4,1,2,3,3],"span":[68,37,39]},{"path":[4,1,2,4],"span":[71,2,38],"leadingComments":" Indexes of the weak imported files in the dependency list.\n For Google-internal migration only. Do not use.\n"},{"path":[4,1,2,4,4],"span":[71,2,10]},{"path":[4,1,2,4,5],"span":[71,11,16]},{"path":[4,1,2,4,1],"span":[71,17,32]},{"path":[4,1,2,4,3],"span":[71,35,37]},{"path":[4,1,2,5],"span":[74,2,44],"leadingComments":" All top-level definitions in this file.\n"},{"path":[4,1,2,5,4],"span":[74,2,10]},{"path":[4,1,2,5,6],"span":[74,11,26]},{"path":[4,1,2,5,1],"span":[74,27,39]},{"path":[4,1,2,5,3],"span":[74,42,43]},{"path":[4,1,2,6],"span":[75,2,45]},{"path":[4,1,2,6,4],"span":[75,2,10]},{"path":[4,1,2,6,6],"span":[75,11,30]},{"path":[4,1,2,6,1],"span":[75,31,40]},{"path":[4,1,2,6,3],"span":[75,43,44]},{"path":[4,1,2,7],"span":[76,2,46]},{"path":[4,1,2,7,4],"span":[76,2,10]},{"path":[4,1,2,7,6],"span":[76,11,33]},{"path":[4,1,2,7,1],"span":[76,34,41]},{"path":[4,1,2,7,3],"span":[76,44,45]},{"path":[4,1,2,8],"span":[77,2,46]},{"path":[4,1,2,8,4],"span":[77,2,10]},{"path":[4,1,2,8,6],"span":[77,11,31]},{"path":[4,1,2,8,1],"span":[77,32,41]},{"path":[4,1,2,8,3],"span":[77,44,45]},{"path":[4,1,2,9],"span":[79,2,35]},{"path":[4,1,2,9,4],"span":[79,2,10]},{"path":[4,1,2,9,6],"span":[79,11,22]},{"path":[4,1,2,9,1],"span":[79,23,30]},{"path":[4,1,2,9,3],"span":[79,33,34]},{"path":[4,1,2,10],"span":[85,2,47],"leadingComments":" This field contains optional information about the original source code.\n You may safely remove this entire field without harming runtime\n functionality of the descriptors -- the information is needed only by\n development tools.\n"},{"path":[4,1,2,10,4],"span":[85,2,10]},{"path":[4,1,2,10,6],"span":[85,11,25]},{"path":[4,1,2,10,1],"span":[85,26,42]},{"path":[4,1,2,10,3],"span":[85,45,46]},{"path":[4,1,2,11],"span":[89,2,30],"leadingComments":" The syntax of the proto file.\n The supported values are \"proto2\" and \"proto3\".\n"},{"path":[4,1,2,11,4],"span":[89,2,10]},{"path":[4,1,2,11,5],"span":[89,11,17]},{"path":[4,1,2,11,1],"span":[89,18,24]},{"path":[4,1,2,11,3],"span":[89,27,29]},{"path":[4,2],"span":[93,0,125,1],"leadingComments":" Describes a message type.\n"},{"path":[4,2,1],"span":[93,8,23]},{"path":[4,2,2,0],"span":[94,2,27]},{"path":[4,2,2,0,4],"span":[94,2,10]},{"path":[4,2,2,0,5],"span":[94,11,17]},{"path":[4,2,2,0,1],"span":[94,18,22]},{"path":[4,2,2,0,3],"span":[94,25,26]},{"path":[4,2,2,1],"span":[96,2,42]},{"path":[4,2,2,1,4],"span":[96,2,10]},{"path":[4,2,2,1,6],"span":[96,11,31]},{"path":[4,2,2,1,1],"span":[96,32,37]},{"path":[4,2,2,1,3],"span":[96,40,41]},{"path":[4,2,2,2],"span":[97,2,46]},{"path":[4,2,2,2,4],"span":[97,2,10]},{"path":[4,2,2,2,6],"span":[97,11,31]},{"path":[4,2,2,2,1],"span":[97,32,41]},{"path":[4,2,2,2,3],"span":[97,44,45]},{"path":[4,2,2,3],"span":[99,2,43]},{"path":[4,2,2,3,4],"span":[99,2,10]},{"path":[4,2,2,3,6],"span":[99,11,26]},{"path":[4,2,2,3,1],"span":[99,27,38]},{"path":[4,2,2,3,3],"span":[99,41,42]},{"path":[4,2,2,4],"span":[100,2,45]},{"path":[4,2,2,4,4],"span":[100,2,10]},{"path":[4,2,2,4,6],"span":[100,11,30]},{"path":[4,2,2,4,1],"span":[100,31,40]},{"path":[4,2,2,4,3],"span":[100,43,44]},{"path":[4,2,3,0],"span":[102,2,107,3]},{"path":[4,2,3,0,1],"span":[102,10,24]},{"path":[4,2,3,0,2,0],"span":[103,4,29],"trailingComments":" Inclusive.\n"},{"path":[4,2,3,0,2,0,4],"span":[103,4,12]},{"path":[4,2,3,0,2,0,5],"span":[103,13,18]},{"path":[4,2,3,0,2,0,1],"span":[103,19,24]},{"path":[4,2,3,0,2,0,3],"span":[103,27,28]},{"path":[4,2,3,0,2,1],"span":[104,4,27],"trailingComments":" Exclusive.\n"},{"path":[4,2,3,0,2,1,4],"span":[104,4,12]},{"path":[4,2,3,0,2,1,5],"span":[104,13,18]},{"path":[4,2,3,0,2,1,1],"span":[104,19,22]},{"path":[4,2,3,0,2,1,3],"span":[104,25,26]},{"path":[4,2,3,0,2,2],"span":[106,4,47]},{"path":[4,2,3,0,2,2,4],"span":[106,4,12]},{"path":[4,2,3,0,2,2,6],"span":[106,13,34]},{"path":[4,2,3,0,2,2,1],"span":[106,35,42]},{"path":[4,2,3,0,2,2,3],"span":[106,45,46]},{"path":[4,2,2,5],"span":[108,2,46]},{"path":[4,2,2,5,4],"span":[108,2,10]},{"path":[4,2,2,5,6],"span":[108,11,25]},{"path":[4,2,2,5,1],"span":[108,26,41]},{"path":[4,2,2,5,3],"span":[108,44,45]},{"path":[4,2,2,6],"span":[110,2,47]},{"path":[4,2,2,6,4],"span":[110,2,10]},{"path":[4,2,2,6,6],"span":[110,11,31]},{"path":[4,2,2,6,1],"span":[110,32,42]},{"path":[4,2,2,6,3],"span":[110,45,46]},{"path":[4,2,2,7],"span":[112,2,38]},{"path":[4,2,2,7,4],"span":[112,2,10]},{"path":[4,2,2,7,6],"span":[112,11,25]},{"path":[4,2,2,7,1],"span":[112,26,33]},{"path":[4,2,2,7,3],"span":[112,36,37]},{"path":[4,2,3,1],"span":[117,2,120,3],"leadingComments":" Range of reserved tag numbers. Reserved tag numbers may not be used by\n fields or extension ranges in the same message. Reserved ranges may\n not overlap.\n"},{"path":[4,2,3,1,1],"span":[117,10,23]},{"path":[4,2,3,1,2,0],"span":[118,4,29],"trailingComments":" Inclusive.\n"},{"path":[4,2,3,1,2,0,4],"span":[118,4,12]},{"path":[4,2,3,1,2,0,5],"span":[118,13,18]},{"path":[4,2,3,1,2,0,1],"span":[118,19,24]},{"path":[4,2,3,1,2,0,3],"span":[118,27,28]},{"path":[4,2,3,1,2,1],"span":[119,4,27],"trailingComments":" Exclusive.\n"},{"path":[4,2,3,1,2,1,4],"span":[119,4,12]},{"path":[4,2,3,1,2,1,5],"span":[119,13,18]},{"path":[4,2,3,1,2,1,1],"span":[119,19,22]},{"path":[4,2,3,1,2,1,3],"span":[119,25,26]},{"path":[4,2,2,8],"span":[121,2,44]},{"path":[4,2,2,8,4],"span":[121,2,10]},{"path":[4,2,2,8,6],"span":[121,11,24]},{"path":[4,2,2,8,1],"span":[121,25,39]},{"path":[4,2,2,8,3],"span":[121,42,43]},{"path":[4,2,2,9],"span":[124,2,37],"leadingComments":" Reserved field names, which may not be used by fields in the same message.\n A given name may only be reserved once.\n"},{"path":[4,2,2,9,4],"span":[124,2,10]},{"path":[4,2,2,9,5],"span":[124,11,17]},{"path":[4,2,2,9,1],"span":[124,18,31]},{"path":[4,2,2,9,3],"span":[124,34,36]},{"path":[4,3],"span":[127,0,134,1]},{"path":[4,3,1],"span":[127,8,29]},{"path":[4,3,2,0],"span":[129,2,58],"leadingComments":" The parser stores options it doesn't recognize here. See above.\n"},{"path":[4,3,2,0,4],"span":[129,2,10]},{"path":[4,3,2,0,6],"span":[129,11,30]},{"path":[4,3,2,0,1],"span":[129,31,51]},{"path":[4,3,2,0,3],"span":[129,54,57]},{"path":[4,3,5],"span":[133,2,25],"leadingComments":" Clients can define custom options in extensions of this message. See above.\n"},{"path":[4,3,5,0],"span":[133,13,24]},{"path":[4,3,5,0,1],"span":[133,13,17]},{"path":[4,3,5,0,2],"span":[133,21,24]},{"path":[4,4],"span":[137,0,238,1],"leadingComments":" Describes a field within a message.\n"},{"path":[4,4,1],"span":[137,8,28]},{"path":[4,4,4,0],"span":[138,2,169,3]},{"path":[4,4,4,0,1],"span":[138,7,11]},{"path":[4,4,4,0,2,0],"span":[141,4,20],"leadingComments":" 0 is reserved for errors.\n Order is weird for historical reasons.\n"},{"path":[4,4,4,0,2,0,1],"span":[141,4,15]},{"path":[4,4,4,0,2,0,2],"span":[141,18,19]},{"path":[4,4,4,0,2,1],"span":[142,4,19]},{"path":[4,4,4,0,2,1,1],"span":[142,4,14]},{"path":[4,4,4,0,2,1,2],"span":[142,17,18]},{"path":[4,4,4,0,2,2],"span":[145,4,19],"leadingComments":" Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n negative values are likely.\n"},{"path":[4,4,4,0,2,2,1],"span":[145,4,14]},{"path":[4,4,4,0,2,2,2],"span":[145,17,18]},{"path":[4,4,4,0,2,3],"span":[146,4,20]},{"path":[4,4,4,0,2,3,1],"span":[146,4,15]},{"path":[4,4,4,0,2,3,2],"span":[146,18,19]},{"path":[4,4,4,0,2,4],"span":[149,4,19],"leadingComments":" Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n negative values are likely.\n"},{"path":[4,4,4,0,2,4,1],"span":[149,4,14]},{"path":[4,4,4,0,2,4,2],"span":[149,17,18]},{"path":[4,4,4,0,2,5],"span":[150,4,21]},{"path":[4,4,4,0,2,5,1],"span":[150,4,16]},{"path":[4,4,4,0,2,5,2],"span":[150,19,20]},{"path":[4,4,4,0,2,6],"span":[151,4,21]},{"path":[4,4,4,0,2,6,1],"span":[151,4,16]},{"path":[4,4,4,0,2,6,2],"span":[151,19,20]},{"path":[4,4,4,0,2,7],"span":[152,4,18]},{"path":[4,4,4,0,2,7,1],"span":[152,4,13]},{"path":[4,4,4,0,2,7,2],"span":[152,16,17]},{"path":[4,4,4,0,2,8],"span":[153,4,20]},{"path":[4,4,4,0,2,8,1],"span":[153,4,15]},{"path":[4,4,4,0,2,8,2],"span":[153,18,19]},{"path":[4,4,4,0,2,9],"span":[158,4,20],"leadingComments":" Tag-delimited aggregate.\n Group type is deprecated and not supported in proto3. However, Proto3\n implementations should still be able to parse the group wire format and\n treat group fields as unknown fields.\n"},{"path":[4,4,4,0,2,9,1],"span":[158,4,14]},{"path":[4,4,4,0,2,9,2],"span":[158,17,19]},{"path":[4,4,4,0,2,10],"span":[159,4,22],"trailingComments":" Length-delimited aggregate.\n"},{"path":[4,4,4,0,2,10,1],"span":[159,4,16]},{"path":[4,4,4,0,2,10,2],"span":[159,19,21]},{"path":[4,4,4,0,2,11],"span":[162,4,20],"leadingComments":" New in version 2.\n"},{"path":[4,4,4,0,2,11,1],"span":[162,4,14]},{"path":[4,4,4,0,2,11,2],"span":[162,17,19]},{"path":[4,4,4,0,2,12],"span":[163,4,21]},{"path":[4,4,4,0,2,12,1],"span":[163,4,15]},{"path":[4,4,4,0,2,12,2],"span":[163,18,20]},{"path":[4,4,4,0,2,13],"span":[164,4,19]},{"path":[4,4,4,0,2,13,1],"span":[164,4,13]},{"path":[4,4,4,0,2,13,2],"span":[164,16,18]},{"path":[4,4,4,0,2,14],"span":[165,4,23]},{"path":[4,4,4,0,2,14,1],"span":[165,4,17]},{"path":[4,4,4,0,2,14,2],"span":[165,20,22]},{"path":[4,4,4,0,2,15],"span":[166,4,23]},{"path":[4,4,4,0,2,15,1],"span":[166,4,17]},{"path":[4,4,4,0,2,15,2],"span":[166,20,22]},{"path":[4,4,4,0,2,16],"span":[167,4,21],"trailingComments":" Uses ZigZag encoding.\n"},{"path":[4,4,4,0,2,16,1],"span":[167,4,15]},{"path":[4,4,4,0,2,16,2],"span":[167,18,20]},{"path":[4,4,4,0,2,17],"span":[168,4,21],"trailingComments":" Uses ZigZag encoding.\n"},{"path":[4,4,4,0,2,17,1],"span":[168,4,15]},{"path":[4,4,4,0,2,17,2],"span":[168,18,20]},{"path":[4,4,4,1],"span":[171,2,176,3]},{"path":[4,4,4,1,1],"span":[171,7,12]},{"path":[4,4,4,1,2,0],"span":[173,4,23],"leadingComments":" 0 is reserved for errors\n"},{"path":[4,4,4,1,2,0,1],"span":[173,4,18]},{"path":[4,4,4,1,2,0,2],"span":[173,21,22]},{"path":[4,4,4,1,2,1],"span":[174,4,23]},{"path":[4,4,4,1,2,1,1],"span":[174,4,18]},{"path":[4,4,4,1,2,1,2],"span":[174,21,22]},{"path":[4,4,4,1,2,2],"span":[175,4,23]},{"path":[4,4,4,1,2,2,1],"span":[175,4,18]},{"path":[4,4,4,1,2,2,2],"span":[175,21,22]},{"path":[4,4,2,0],"span":[178,2,27]},{"path":[4,4,2,0,4],"span":[178,2,10]},{"path":[4,4,2,0,5],"span":[178,11,17]},{"path":[4,4,2,0,1],"span":[178,18,22]},{"path":[4,4,2,0,3],"span":[178,25,26]},{"path":[4,4,2,1],"span":[179,2,28]},{"path":[4,4,2,1,4],"span":[179,2,10]},{"path":[4,4,2,1,5],"span":[179,11,16]},{"path":[4,4,2,1,1],"span":[179,17,23]},{"path":[4,4,2,1,3],"span":[179,26,27]},{"path":[4,4,2,2],"span":[180,2,27]},{"path":[4,4,2,2,4],"span":[180,2,10]},{"path":[4,4,2,2,6],"span":[180,11,16]},{"path":[4,4,2,2,1],"span":[180,17,22]},{"path":[4,4,2,2,3],"span":[180,25,26]},{"path":[4,4,2,3],"span":[184,2,25],"leadingComments":" If type_name is set, this need not be set.  If both this and type_name\n are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.\n"},{"path":[4,4,2,3,4],"span":[184,2,10]},{"path":[4,4,2,3,6],"span":[184,11,15]},{"path":[4,4,2,3,1],"span":[184,16,20]},{"path":[4,4,2,3,3],"span":[184,23,24]},{"path":[4,4,2,4],"span":[191,2,32],"leadingComments":" For message and enum types, this is the name of the type.  If the name\n starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping\n rules are used to find the type (i.e. first the nested types within this\n message are searched, then within the parent, on up to the root\n namespace).\n"},{"path":[4,4,2,4,4],"span":[191,2,10]},{"path":[4,4,2,4,5],"span":[191,11,17]},{"path":[4,4,2,4,1],"span":[191,18,27]},{"path":[4,4,2,4,3],"span":[191,30,31]},{"path":[4,4,2,5],"span":[195,2,31],"leadingComments":" For extensions, this is the name of the type being extended.  It is\n resolved in the same manner as type_name.\n"},{"path":[4,4,2,5,4],"span":[195,2,10]},{"path":[4,4,2,5,5],"span":[195,11,17]},{"path":[4,4,2,5,1],"span":[195,18,26]},{"path":[4,4,2,5,3],"span":[195,29,30]},{"path":[4,4,2,6],"span":[202,2,36],"leadingComments":" For numeric types, contains the original text representation of the value.\n For booleans, \"true\" or \"false\".\n For strings, contains the default text contents (not escaped in any way).\n For bytes, contains the C escaped value.  All bytes >= 128 are escaped.\n TODO(kenton):  Base-64 encode?\n"},{"path":[4,4,2,6,4],"span":[202,2,10]},{"path":[4,4,2,6,5],"span":[202,11,17]},{"path":[4,4,2,6,1],"span":[202,18,31]},{"path":[4,4,2,6,3],"span":[202,34,35]},{"path":[4,4,2,7],"span":[206,2,33],"leadingComments":" If set, gives the index of a oneof in the containing type's oneof_decl\n list.  This field is a member of that oneof.\n"},{"path":[4,4,2,7,4],"span":[206,2,10]},{"path":[4,4,2,7,5],"span":[206,11,16]},{"path":[4,4,2,7,1],"span":[206,17,28]},{"path":[4,4,2,7,3],"span":[206,31,32]},{"path":[4,4,2,8],"span":[212,2,33],"leadingComments":" JSON name of this field. The value is set by protocol compiler. If the\n user has set a \"json_name\" option on this field, that option's value\n will be used. Otherwise, it's deduced from the field's name by converting\n it to camelCase.\n"},{"path":[4,4,2,8,4],"span":[212,2,10]},{"path":[4,4,2,8,5],"span":[212,11,17]},{"path":[4,4,2,8,1],"span":[212,18,27]},{"path":[4,4,2,8,3],"span":[212,30,32]},{"path":[4,4,2,9],"span":[214,2,36]},{"path":[4,4,2,9,4],"span":[214,2,10]},{"path":[4,4,2,9,6],"span":[214,11,23]},{"path":[4,4,2,9,1],"span":[214,24,31]},{"path":[4,4,2,9,3],"span":[214,34,35]},{"path":[4,4,2,10],"span":[237,2,37],"leadingComments":" If true, this is a proto3 \"optional\". When a proto3 field is optional, it\n tracks presence regardless of field type.\n\n When proto3_optional is true, this field must be belong to a oneof to\n signal to old proto3 clients that presence is tracked for this field. This\n oneof is known as a \"synthetic\" oneof, and this field must be its sole\n member (each proto3 optional field gets its own synthetic oneof). Synthetic\n oneofs exist in the descriptor only, and do not generate any API. Synthetic\n oneofs must be ordered after all \"real\" oneofs.\n\n For message fields, proto3_optional doesn't create any semantic change,\n since non-repeated message fields always track presence. However it still\n indicates the semantic detail of whether the user wrote \"optional\" or not.\n This can be useful for round-tripping the .proto file. For consistency we\n give message fields a synthetic oneof also, even though it is not required\n to track presence. This is especially important because the parser can't\n tell if a field is a message or an enum, so it must always create a\n synthetic oneof.\n\n Proto2 optional fields do not set this flag, because they already indicate\n optional with `LABEL_OPTIONAL`.\n"},{"path":[4,4,2,10,4],"span":[237,2,10]},{"path":[4,4,2,10,5],"span":[237,11,15]},{"path":[4,4,2,10,1],"span":[237,16,31]},{"path":[4,4,2,10,3],"span":[237,34,36]},{"path":[4,5],"span":[241,0,244,1],"leadingComments":" Describes a oneof.\n"},{"path":[4,5,1],"span":[241,8,28]},{"path":[4,5,2,0],"span":[242,2,27]},{"path":[4,5,2,0,4],"span":[242,2,10]},{"path":[4,5,2,0,5],"span":[242,11,17]},{"path":[4,5,2,0,1],"span":[242,18,22]},{"path":[4,5,2,0,3],"span":[242,25,26]},{"path":[4,5,2,1],"span":[243,2,36]},{"path":[4,5,2,1,4],"span":[243,2,10]},{"path":[4,5,2,1,6],"span":[243,11,23]},{"path":[4,5,2,1,1],"span":[243,24,31]},{"path":[4,5,2,1,3],"span":[243,34,35]},{"path":[4,6],"span":[247,0,273,1],"leadingComments":" Describes an enum type.\n"},{"path":[4,6,1],"span":[247,8,27]},{"path":[4,6,2,0],"span":[248,2,27]},{"path":[4,6,2,0,4],"span":[248,2,10]},{"path":[4,6,2,0,5],"span":[248,11,17]},{"path":[4,6,2,0,1],"span":[248,18,22]},{"path":[4,6,2,0,3],"span":[248,25,26]},{"path":[4,6,2,1],"span":[250,2,46]},{"path":[4,6,2,1,4],"span":[250,2,10]},{"path":[4,6,2,1,6],"span":[250,11,35]},{"path":[4,6,2,1,1],"span":[250,36,41]},{"path":[4,6,2,1,3],"span":[250,44,45]},{"path":[4,6,2,2],"span":[252,2,35]},{"path":[4,6,2,2,4],"span":[252,2,10]},{"path":[4,6,2,2,6],"span":[252,11,22]},{"path":[4,6,2,2,1],"span":[252,23,30]},{"path":[4,6,2,2,3],"span":[252,33,34]},{"path":[4,6,3,0],"span":[260,2,263,3],"leadingComments":" Range of reserved numeric values. Reserved values may not be used by\n entries in the same enum. Reserved ranges may not overlap.\n\n Note that this is distinct from DescriptorProto.ReservedRange in that it\n is inclusive such that it can appropriately represent the entire int32\n domain.\n"},{"path":[4,6,3,0,1],"span":[260,10,27]},{"path":[4,6,3,0,2,0],"span":[261,4,29],"trailingComments":" Inclusive.\n"},{"path":[4,6,3,0,2,0,4],"span":[261,4,12]},{"path":[4,6,3,0,2,0,5],"span":[261,13,18]},{"path":[4,6,3,0,2,0,1],"span":[261,19,24]},{"path":[4,6,3,0,2,0,3],"span":[261,27,28]},{"path":[4,6,3,0,2,1],"span":[262,4,27],"trailingComments":" Inclusive.\n"},{"path":[4,6,3,0,2,1,4],"span":[262,4,12]},{"path":[4,6,3,0,2,1,5],"span":[262,13,18]},{"path":[4,6,3,0,2,1,1],"span":[262,19,22]},{"path":[4,6,3,0,2,1,3],"span":[262,25,26]},{"path":[4,6,2,3],"span":[268,2,48],"leadingComments":" Range of reserved numeric values. Reserved numeric values may not be used\n by enum values in the same enum declaration. Reserved ranges may not\n overlap.\n"},{"path":[4,6,2,3,4],"span":[268,2,10]},{"path":[4,6,2,3,6],"span":[268,11,28]},{"path":[4,6,2,3,1],"span":[268,29,43]},{"path":[4,6,2,3,3],"span":[268,46,47]},{"path":[4,6,2,4],"span":[272,2,36],"leadingComments":" Reserved enum value names, which may not be reused. A given name may only\n be reserved once.\n"},{"path":[4,6,2,4,4],"span":[272,2,10]},{"path":[4,6,2,4,5],"span":[272,11,17]},{"path":[4,6,2,4,1],"span":[272,18,31]},{"path":[4,6,2,4,3],"span":[272,34,35]},{"path":[4,7],"span":[276,0,281,1],"leadingComments":" Describes a value within an enum.\n"},{"path":[4,7,1],"span":[276,8,32]},{"path":[4,7,2,0],"span":[277,2,27]},{"path":[4,7,2,0,4],"span":[277,2,10]},{"path":[4,7,2,0,5],"span":[277,11,17]},{"path":[4,7,2,0,1],"span":[277,18,22]},{"path":[4,7,2,0,3],"span":[277,25,26]},{"path":[4,7,2,1],"span":[278,2,28]},{"path":[4,7,2,1,4],"span":[278,2,10]},{"path":[4,7,2,1,5],"span":[278,11,16]},{"path":[4,7,2,1,1],"span":[278,17,23]},{"path":[4,7,2,1,3],"span":[278,26,27]},{"path":[4,7,2,2],"span":[280,2,40]},{"path":[4,7,2,2,4],"span":[280,2,10]},{"path":[4,7,2,2,6],"span":[280,11,27]},{"path":[4,7,2,2,1],"span":[280,28,35]},{"path":[4,7,2,2,3],"span":[280,38,39]},{"path":[4,8],"span":[284,0,289,1],"leadingComments":" Describes a service.\n"},{"path":[4,8,1],"span":[284,8,30]},{"path":[4,8,2,0],"span":[285,2,27]},{"path":[4,8,2,0,4],"span":[285,2,10]},{"path":[4,8,2,0,5],"span":[285,11,17]},{"path":[4,8,2,0,1],"span":[285,18,22]},{"path":[4,8,2,0,3],"span":[285,25,26]},{"path":[4,8,2,1],"span":[286,2,44]},{"path":[4,8,2,1,4],"span":[286,2,10]},{"path":[4,8,2,1,6],"span":[286,11,32]},{"path":[4,8,2,1,1],"span":[286,33,39]},{"path":[4,8,2,1,3],"span":[286,42,43]},{"path":[4,8,2,2],"span":[288,2,38]},{"path":[4,8,2,2,4],"span":[288,2,10]},{"path":[4,8,2,2,6],"span":[288,11,25]},{"path":[4,8,2,2,1],"span":[288,26,33]},{"path":[4,8,2,2,3],"span":[288,36,37]},{"path":[4,9],"span":[292,0,306,1],"leadingComments":" Describes a method of a service.\n"},{"path":[4,9,1],"span":[292,8,29]},{"path":[4,9,2,0],"span":[293,2,27]},{"path":[4,9,2,0,4],"span":[293,2,10]},{"path":[4,9,2,0,5],"span":[293,11,17]},{"path":[4,9,2,0,1],"span":[293,18,22]},{"path":[4,9,2,0,3],"span":[293,25,26]},{"path":[4,9,2,1],"span":[297,2,33],"leadingComments":" Input and output type names.  These are resolved in the same way as\n FieldDescriptorProto.type_name, but must refer to a message type.\n"},{"path":[4,9,2,1,4],"span":[297,2,10]},{"path":[4,9,2,1,5],"span":[297,11,17]},{"path":[4,9,2,1,1],"span":[297,18,28]},{"path":[4,9,2,1,3],"span":[297,31,32]},{"path":[4,9,2,2],"span":[298,2,34]},{"path":[4,9,2,2,4],"span":[298,2,10]},{"path":[4,9,2,2,5],"span":[298,11,17]},{"path":[4,9,2,2,1],"span":[298,18,29]},{"path":[4,9,2,2,3],"span":[298,32,33]},{"path":[4,9,2,3],"span":[300,2,37]},{"path":[4,9,2,3,4],"span":[300,2,10]},{"path":[4,9,2,3,6],"span":[300,11,24]},{"path":[4,9,2,3,1],"span":[300,25,32]},{"path":[4,9,2,3,3],"span":[300,35,36]},{"path":[4,9,2,4],"span":[303,2,55],"leadingComments":" Identifies if client streams multiple client messages\n"},{"path":[4,9,2,4,4],"span":[303,2,10]},{"path":[4,9,2,4,5],"span":[303,11,15]},{"path":[4,9,2,4,1],"span":[303,16,32]},{"path":[4,9,2,4,3],"span":[303,35,36]},{"path":[4,9,2,4,8],"span":[303,37,54]},{"path":[4,9,2,4,7],"span":[303,38,53]},{"path":[4,9,2,5],"span":[305,2,55],"leadingComments":" Identifies if server streams multiple server messages\n"},{"path":[4,9,2,5,4],"span":[305,2,10]},{"path":[4,9,2,5,5],"span":[305,11,15]},{"path":[4,9,2,5,1],"span":[305,16,32]},{"path":[4,9,2,5,3],"span":[305,35,36]},{"path":[4,9,2,5,8],"span":[305,37,54]},{"path":[4,9,2,5,7],"span":[305,38,53]},{"path":[4,10],"span":[341,0,464,1],"leadingDetachedComments":[" ===================================================================\n Options\n"," Each of the definitions above may have \"options\" attached.  These are\n just annotations which may cause code to be generated slightly differently\n or may contain hints for code that manipulates protocol messages.\n\n Clients may define custom options as extensions of the *Options messages.\n These extensions may not yet be known at parsing time, so the parser cannot\n store the values in them.  Instead it stores them in a field in the *Options\n message called uninterpreted_option. This field must have the same name\n across all *Options messages. We then use this field to populate the\n extensions when we build a descriptor, at which point all protos have been\n parsed and so all extensions are known.\n\n Extension numbers for custom options may be chosen as follows:\n * For options which will only be used within a single application or\n   organization, or for experimental options, use field numbers 50000\n   through 99999.  It is up to you to ensure that you do not use the\n   same number for multiple options.\n * For options which will be published and used publicly by multiple\n   independent entities, e-mail protobuf-global-extension-registry@google.com\n   to reserve extension numbers. Simply provide your project name (e.g.\n   Objective-C plugin) and your project website (if available) -- there's no\n   need to explain how you intend to use them. Usually you only need one\n   extension number. You can declare multiple options with only one extension\n   number by putting them in a sub-message. See the Custom Options section of\n   the docs for examples:\n   https://developers.google.com/protocol-buffers/docs/proto#options\n   If this turns out to be popular, a web service will be set up\n   to automatically assign option numbers.\n"]},{"path":[4,10,1],"span":[341,8,19]},{"path":[4,10,2,0],"span":[347,2,35],"leadingComments":" Sets the Java package where classes generated from this .proto will be\n placed.  By default, the proto package is used, but this is often\n inappropriate because proto packages do not normally start with backwards\n domain names.\n"},{"path":[4,10,2,0,4],"span":[347,2,10]},{"path":[4,10,2,0,5],"span":[347,11,17]},{"path":[4,10,2,0,1],"span":[347,18,30]},{"path":[4,10,2,0,3],"span":[347,33,34]},{"path":[4,10,2,1],"span":[355,2,43],"leadingComments":" Controls the name of the wrapper Java class generated for the .proto file.\n That class will always contain the .proto file's getDescriptor() method as\n well as any top-level extensions defined in the .proto file.\n If java_multiple_files is disabled, then all the other classes from the\n .proto file will be nested inside the single wrapper outer class.\n"},{"path":[4,10,2,1,4],"span":[355,2,10]},{"path":[4,10,2,1,5],"span":[355,11,17]},{"path":[4,10,2,1,1],"span":[355,18,38]},{"path":[4,10,2,1,3],"span":[355,41,42]},{"path":[4,10,2,2],"span":[363,2,59],"leadingComments":" If enabled, then the Java code generator will generate a separate .java\n file for each top-level message, enum, and service defined in the .proto\n file.  Thus, these types will *not* be nested inside the wrapper class\n named by java_outer_classname.  However, the wrapper class will still be\n generated to contain the file's getDescriptor() method as well as any\n top-level extensions defined in the file.\n"},{"path":[4,10,2,2,4],"span":[363,2,10]},{"path":[4,10,2,2,5],"span":[363,11,15]},{"path":[4,10,2,2,1],"span":[363,16,35]},{"path":[4,10,2,2,3],"span":[363,38,40]},{"path":[4,10,2,2,8],"span":[363,41,58]},{"path":[4,10,2,2,7],"span":[363,42,57]},{"path":[4,10,2,3],"span":[366,2,69],"leadingComments":" This option does nothing.\n"},{"path":[4,10,2,3,4],"span":[366,2,10]},{"path":[4,10,2,3,5],"span":[366,11,15]},{"path":[4,10,2,3,1],"span":[366,16,45]},{"path":[4,10,2,3,3],"span":[366,48,50]},{"path":[4,10,2,3,8],"span":[366,51,68]},{"path":[4,10,2,3,8,3],"span":[366,52,67]},{"path":[4,10,2,4],"span":[374,2,62],"leadingComments":" If set true, then the Java2 code generator will generate code that\n throws an exception whenever an attempt is made to assign a non-UTF-8\n byte sequence to a string field.\n Message reflection will do the same.\n However, an extension field still accepts non-UTF-8 byte sequences.\n This option has no effect on when used with the lite runtime.\n"},{"path":[4,10,2,4,4],"span":[374,2,10]},{"path":[4,10,2,4,5],"span":[374,11,15]},{"path":[4,10,2,4,1],"span":[374,16,38]},{"path":[4,10,2,4,3],"span":[374,41,43]},{"path":[4,10,2,4,8],"span":[374,44,61]},{"path":[4,10,2,4,7],"span":[374,45,60]},{"path":[4,10,4,0],"span":[378,2,383,3],"leadingComments":" Generated classes can be optimized for speed or code size.\n"},{"path":[4,10,4,0,1],"span":[378,7,19]},{"path":[4,10,4,0,2,0],"span":[379,4,14],"trailingComments":" Generate complete code for parsing, serialization,\n"},{"path":[4,10,4,0,2,0,1],"span":[379,4,9]},{"path":[4,10,4,0,2,0,2],"span":[379,12,13]},{"path":[4,10,4,0,2,1],"span":[381,4,18],"leadingComments":" etc.\n","trailingComments":" Use ReflectionOps to implement these methods.\n"},{"path":[4,10,4,0,2,1,1],"span":[381,4,13]},{"path":[4,10,4,0,2,1,2],"span":[381,16,17]},{"path":[4,10,4,0,2,2],"span":[382,4,21],"trailingComments":" Generate code using MessageLite and the lite runtime.\n"},{"path":[4,10,4,0,2,2,1],"span":[382,4,16]},{"path":[4,10,4,0,2,2,2],"span":[382,19,20]},{"path":[4,10,2,5],"span":[384,2,59]},{"path":[4,10,2,5,4],"span":[384,2,10]},{"path":[4,10,2,5,6],"span":[384,11,23]},{"path":[4,10,2,5,1],"span":[384,24,36]},{"path":[4,10,2,5,3],"span":[384,39,40]},{"path":[4,10,2,5,8],"span":[384,41,58]},{"path":[4,10,2,5,7],"span":[384,42,57]},{"path":[4,10,2,6],"span":[391,2,34],"leadingComments":" Sets the Go package where structs generated from this .proto will be\n placed. If omitted, the Go package will be derived from the following:\n   - The basename of the package import path, if provided.\n   - Otherwise, the package statement in the .proto file, if present.\n   - Otherwise, the basename of the .proto file, without extension.\n"},{"path":[4,10,2,6,4],"span":[391,2,10]},{"path":[4,10,2,6,5],"span":[391,11,17]},{"path":[4,10,2,6,1],"span":[391,18,28]},{"path":[4,10,2,6,3],"span":[391,31,33]},{"path":[4,10,2,7],"span":[406,2,59],"leadingComments":" Should generic services be generated in each language?  \"Generic\" services\n are not specific to any particular RPC system.  They are generated by the\n main code generators in each language (without additional plugins).\n Generic services were the only kind of service generation supported by\n early versions of google.protobuf.\n\n Generic services are now considered deprecated in favor of using plugins\n that generate code specific to your particular RPC system.  Therefore,\n these default to false.  Old code which depends on generic services should\n explicitly set them to true.\n"},{"path":[4,10,2,7,4],"span":[406,2,10]},{"path":[4,10,2,7,5],"span":[406,11,15]},{"path":[4,10,2,7,1],"span":[406,16,35]},{"path":[4,10,2,7,3],"span":[406,38,40]},{"path":[4,10,2,7,8],"span":[406,41,58]},{"path":[4,10,2,7,7],"span":[406,42,57]},{"path":[4,10,2,8],"span":[407,2,61]},{"path":[4,10,2,8,4],"span":[407,2,10]},{"path":[4,10,2,8,5],"span":[407,11,15]},{"path":[4,10,2,8,1],"span":[407,16,37]},{"path":[4,10,2,8,3],"span":[407,40,42]},{"path":[4,10,2,8,8],"span":[407,43,60]},{"path":[4,10,2,8,7],"span":[407,44,59]},{"path":[4,10,2,9],"span":[408,2,59]},{"path":[4,10,2,9,4],"span":[408,2,10]},{"path":[4,10,2,9,5],"span":[408,11,15]},{"path":[4,10,2,9,1],"span":[408,16,35]},{"path":[4,10,2,9,3],"span":[408,38,40]},{"path":[4,10,2,9,8],"span":[408,41,58]},{"path":[4,10,2,9,7],"span":[408,42,57]},{"path":[4,10,2,10],"span":[409,2,60]},{"path":[4,10,2,10,4],"span":[409,2,10]},{"path":[4,10,2,10,5],"span":[409,11,15]},{"path":[4,10,2,10,1],"span":[409,16,36]},{"path":[4,10,2,10,3],"span":[409,39,41]},{"path":[4,10,2,10,8],"span":[409,42,59]},{"path":[4,10,2,10,7],"span":[409,43,58]},{"path":[4,10,2,11],"span":[415,2,50],"leadingComments":" Is this file deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for everything in the file, or it will be completely ignored; in the very\n least, this is a formalization for deprecating files.\n"},{"path":[4,10,2,11,4],"span":[415,2,10]},{"path":[4,10,2,11,5],"span":[415,11,15]},{"path":[4,10,2,11,1],"span":[415,16,26]},{"path":[4,10,2,11,3],"span":[415,29,31]},{"path":[4,10,2,11,8],"span":[415,32,49]},{"path":[4,10,2,11,7],"span":[415,33,48]},{"path":[4,10,2,12],"span":[419,2,55],"leadingComments":" Enables the use of arenas for the proto messages in this file. This applies\n only to generated classes for C++.\n"},{"path":[4,10,2,12,4],"span":[419,2,10]},{"path":[4,10,2,12,5],"span":[419,11,15]},{"path":[4,10,2,12,1],"span":[419,16,32]},{"path":[4,10,2,12,3],"span":[419,35,37]},{"path":[4,10,2,12,8],"span":[419,38,54]},{"path":[4,10,2,12,7],"span":[419,39,53]},{"path":[4,10,2,13],"span":[424,2,41],"leadingComments":" Sets the objective c class prefix which is prepended to all objective c\n generated classes from this .proto. There is no default.\n"},{"path":[4,10,2,13,4],"span":[424,2,10]},{"path":[4,10,2,13,5],"span":[424,11,17]},{"path":[4,10,2,13,1],"span":[424,18,35]},{"path":[4,10,2,13,3],"span":[424,38,40]},{"path":[4,10,2,14],"span":[427,2,40],"leadingComments":" Namespace for generated classes; defaults to the package.\n"},{"path":[4,10,2,14,4],"span":[427,2,10]},{"path":[4,10,2,14,5],"span":[427,11,17]},{"path":[4,10,2,14,1],"span":[427,18,34]},{"path":[4,10,2,14,3],"span":[427,37,39]},{"path":[4,10,2,15],"span":[433,2,36],"leadingComments":" By default Swift generators will take the proto package and CamelCase it\n replacing '.' with underscore and use that to prefix the types/symbols\n defined. When this options is provided, they will use this value instead\n to prefix the types/symbols defined.\n"},{"path":[4,10,2,15,4],"span":[433,2,10]},{"path":[4,10,2,15,5],"span":[433,11,17]},{"path":[4,10,2,15,1],"span":[433,18,30]},{"path":[4,10,2,15,3],"span":[433,33,35]},{"path":[4,10,2,16],"span":[437,2,40],"leadingComments":" Sets the php class prefix which is prepended to all php generated classes\n from this .proto. Default is empty.\n"},{"path":[4,10,2,16,4],"span":[437,2,10]},{"path":[4,10,2,16,5],"span":[437,11,17]},{"path":[4,10,2,16,1],"span":[437,18,34]},{"path":[4,10,2,16,3],"span":[437,37,39]},{"path":[4,10,2,17],"span":[442,2,37],"leadingComments":" Use this option to change the namespace of php generated classes. Default\n is empty. When this option is empty, the package name will be used for\n determining the namespace.\n"},{"path":[4,10,2,17,4],"span":[442,2,10]},{"path":[4,10,2,17,5],"span":[442,11,17]},{"path":[4,10,2,17,1],"span":[442,18,31]},{"path":[4,10,2,17,3],"span":[442,34,36]},{"path":[4,10,2,18],"span":[447,2,46],"leadingComments":" Use this option to change the namespace of php generated metadata classes.\n Default is empty. When this option is empty, the proto file name will be\n used for determining the namespace.\n"},{"path":[4,10,2,18,4],"span":[447,2,10]},{"path":[4,10,2,18,5],"span":[447,11,17]},{"path":[4,10,2,18,1],"span":[447,18,40]},{"path":[4,10,2,18,3],"span":[447,43,45]},{"path":[4,10,2,19],"span":[452,2,36],"leadingComments":" Use this option to change the package of ruby generated classes. Default\n is empty. When this option is not set, the package name will be used for\n determining the ruby package.\n"},{"path":[4,10,2,19,4],"span":[452,2,10]},{"path":[4,10,2,19,5],"span":[452,11,17]},{"path":[4,10,2,19,1],"span":[452,18,30]},{"path":[4,10,2,19,3],"span":[452,33,35]},{"path":[4,10,2,20],"span":[457,2,58],"leadingComments":" The parser stores options it doesn't recognize here.\n See the documentation for the \"Options\" section above.\n"},{"path":[4,10,2,20,4],"span":[457,2,10]},{"path":[4,10,2,20,6],"span":[457,11,30]},{"path":[4,10,2,20,1],"span":[457,31,51]},{"path":[4,10,2,20,3],"span":[457,54,57]},{"path":[4,10,5],"span":[461,2,25],"leadingComments":" Clients can define custom options in extensions of this message.\n See the documentation for the \"Options\" section above.\n"},{"path":[4,10,5,0],"span":[461,13,24]},{"path":[4,10,5,0,1],"span":[461,13,17]},{"path":[4,10,5,0,2],"span":[461,21,24]},{"path":[4,10,9],"span":[463,2,14]},{"path":[4,10,9,0],"span":[463,11,13]},{"path":[4,10,9,0,1],"span":[463,11,13]},{"path":[4,11],"span":[466,0,532,1]},{"path":[4,11,1],"span":[466,8,22]},{"path":[4,11,2,0],"span":[485,2,62],"leadingComments":" Set true to use the old proto1 MessageSet wire format for extensions.\n This is provided for backwards-compatibility with the MessageSet wire\n format.  You should not use this for any other reason:  It's less\n efficient, has fewer features, and is more complicated.\n\n The message must be defined exactly as follows:\n   message Foo {\n     option message_set_wire_format = true;\n     extensions 4 to max;\n   }\n Note that the message cannot have any defined fields; MessageSets only\n have extensions.\n\n All extensions of your type must be singular messages; e.g. they cannot\n be int32s, enums, or repeated messages.\n\n Because this is an option, the above two restrictions are not enforced by\n the protocol compiler.\n"},{"path":[4,11,2,0,4],"span":[485,2,10]},{"path":[4,11,2,0,5],"span":[485,11,15]},{"path":[4,11,2,0,1],"span":[485,16,39]},{"path":[4,11,2,0,3],"span":[485,42,43]},{"path":[4,11,2,0,8],"span":[485,44,61]},{"path":[4,11,2,0,7],"span":[485,45,60]},{"path":[4,11,2,1],"span":[490,2,70],"leadingComments":" Disables the generation of the standard \"descriptor()\" accessor, which can\n conflict with a field of the same name.  This is meant to make migration\n from proto1 easier; new code should avoid fields named \"descriptor\".\n"},{"path":[4,11,2,1,4],"span":[490,2,10]},{"path":[4,11,2,1,5],"span":[490,11,15]},{"path":[4,11,2,1,1],"span":[490,16,47]},{"path":[4,11,2,1,3],"span":[490,50,51]},{"path":[4,11,2,1,8],"span":[490,52,69]},{"path":[4,11,2,1,7],"span":[490,53,68]},{"path":[4,11,2,2],"span":[496,2,49],"leadingComments":" Is this message deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the message, or it will be completely ignored; in the very least,\n this is a formalization for deprecating messages.\n"},{"path":[4,11,2,2,4],"span":[496,2,10]},{"path":[4,11,2,2,5],"span":[496,11,15]},{"path":[4,11,2,2,1],"span":[496,16,26]},{"path":[4,11,2,2,3],"span":[496,29,30]},{"path":[4,11,2,2,8],"span":[496,31,48]},{"path":[4,11,2,2,7],"span":[496,32,47]},{"path":[4,11,9],"span":[498,2,19]},{"path":[4,11,9,0],"span":[498,11,12]},{"path":[4,11,9,0,1],"span":[498,11,12]},{"path":[4,11,9,1],"span":[498,14,15]},{"path":[4,11,9,1,1],"span":[498,14,15]},{"path":[4,11,9,2],"span":[498,17,18]},{"path":[4,11,9,2,1],"span":[498,17,18]},{"path":[4,11,2,3],"span":[521,2,30],"leadingComments":" Whether the message is an automatically generated map entry type for the\n maps field.\n\n For maps fields:\n     map<KeyType, ValueType> map_field = 1;\n The parsed descriptor looks like:\n     message MapFieldEntry {\n         option map_entry = true;\n         optional KeyType key = 1;\n         optional ValueType value = 2;\n     }\n     repeated MapFieldEntry map_field = 1;\n\n Implementations may choose not to generate the map_entry=true message, but\n use a native map in the target language to hold the keys and values.\n The reflection APIs in such implementations still need to work as\n if the field is a repeated message field.\n\n NOTE: Do not set the option in .proto files. Always use the maps syntax\n instead. The option should only be implicitly set by the proto compiler\n parser.\n"},{"path":[4,11,2,3,4],"span":[521,2,10]},{"path":[4,11,2,3,5],"span":[521,11,15]},{"path":[4,11,2,3,1],"span":[521,16,25]},{"path":[4,11,2,3,3],"span":[521,28,29]},{"path":[4,11,9],"span":[523,2,13],"trailingComments":" javalite_serializable\n"},{"path":[4,11,9,3],"span":[523,11,12]},{"path":[4,11,9,3,1],"span":[523,11,12]},{"path":[4,11,9],"span":[524,2,13],"trailingComments":" javanano_as_lite\n"},{"path":[4,11,9,4],"span":[524,11,12]},{"path":[4,11,9,4,1],"span":[524,11,12]},{"path":[4,11,2,4],"span":[528,2,58],"leadingComments":" The parser stores options it doesn't recognize here. See above.\n"},{"path":[4,11,2,4,4],"span":[528,2,10]},{"path":[4,11,2,4,6],"span":[528,11,30]},{"path":[4,11,2,4,1],"span":[528,31,51]},{"path":[4,11,2,4,3],"span":[528,54,57]},{"path":[4,11,5],"span":[531,2,25],"leadingComments":" Clients can define custom options in extensions of this message. See above.\n"},{"path":[4,11,5,0],"span":[531,13,24]},{"path":[4,11,5,0,1],"span":[531,13,17]},{"path":[4,11,5,0,2],"span":[531,21,24]},{"path":[4,12],"span":[534,0,625,1]},{"path":[4,12,1],"span":[534,8,20]},{"path":[4,12,2,0],"span":[539,2,46],"leadingComments":" The ctype option instructs the C++ code generator to use a different\n representation of the field than it normally would.  See the specific\n options below.  This option is not yet implemented in the open source\n release -- sorry, we'll try to include it in a future version!\n"},{"path":[4,12,2,0,4],"span":[539,2,10]},{"path":[4,12,2,0,6],"span":[539,11,16]},{"path":[4,12,2,0,1],"span":[539,17,22]},{"path":[4,12,2,0,3],"span":[539,25,26]},{"path":[4,12,2,0,8],"span":[539,27,45]},{"path":[4,12,2,0,7],"span":[539,28,44]},{"path":[4,12,4,0],"span":[540,2,547,3]},{"path":[4,12,4,0,1],"span":[540,7,12]},{"path":[4,12,4,0,2,0],"span":[542,4,15],"leadingComments":" Default mode.\n"},{"path":[4,12,4,0,2,0,1],"span":[542,4,10]},{"path":[4,12,4,0,2,0,2],"span":[542,13,14]},{"path":[4,12,4,0,2,1],"span":[544,4,13]},{"path":[4,12,4,0,2,1,1],"span":[544,4,8]},{"path":[4,12,4,0,2,1,2],"span":[544,11,12]},{"path":[4,12,4,0,2,2],"span":[546,4,21]},{"path":[4,12,4,0,2,2,1],"span":[546,4,16]},{"path":[4,12,4,0,2,2,2],"span":[546,19,20]},{"path":[4,12,2,1],"span":[553,2,27],"leadingComments":" The packed option can be enabled for repeated primitive fields to enable\n a more efficient representation on the wire. Rather than repeatedly\n writing the tag and type for each element, the entire array is encoded as\n a single length-delimited blob. In proto3, only explicit setting it to\n false will avoid using packed encoding.\n"},{"path":[4,12,2,1,4],"span":[553,2,10]},{"path":[4,12,2,1,5],"span":[553,11,15]},{"path":[4,12,2,1,1],"span":[553,16,22]},{"path":[4,12,2,1,3],"span":[553,25,26]},{"path":[4,12,2,2],"span":[566,2,51],"leadingComments":" The jstype option determines the JavaScript type used for values of the\n field.  The option is permitted only for 64 bit integral and fixed types\n (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING\n is represented as JavaScript string, which avoids loss of precision that\n can happen when a large value is converted to a floating point JavaScript.\n Specifying JS_NUMBER for the jstype causes the generated JavaScript code to\n use the JavaScript \"number\" type.  The behavior of the default option\n JS_NORMAL is implementation dependent.\n\n This option is an enum to permit additional types to be added, e.g.\n goog.math.Integer.\n"},{"path":[4,12,2,2,4],"span":[566,2,10]},{"path":[4,12,2,2,6],"span":[566,11,17]},{"path":[4,12,2,2,1],"span":[566,18,24]},{"path":[4,12,2,2,3],"span":[566,27,28]},{"path":[4,12,2,2,8],"span":[566,29,50]},{"path":[4,12,2,2,7],"span":[566,30,49]},{"path":[4,12,4,1],"span":[567,2,576,3]},{"path":[4,12,4,1,1],"span":[567,7,13]},{"path":[4,12,4,1,2,0],"span":[569,4,18],"leadingComments":" Use the default type.\n"},{"path":[4,12,4,1,2,0,1],"span":[569,4,13]},{"path":[4,12,4,1,2,0,2],"span":[569,16,17]},{"path":[4,12,4,1,2,1],"span":[572,4,18],"leadingComments":" Use JavaScript strings.\n"},{"path":[4,12,4,1,2,1,1],"span":[572,4,13]},{"path":[4,12,4,1,2,1,2],"span":[572,16,17]},{"path":[4,12,4,1,2,2],"span":[575,4,18],"leadingComments":" Use JavaScript numbers.\n"},{"path":[4,12,4,1,2,2,1],"span":[575,4,13]},{"path":[4,12,4,1,2,2,2],"span":[575,16,17]},{"path":[4,12,2,3],"span":[606,2,43],"leadingComments":" Should this field be parsed lazily?  Lazy applies only to message-type\n fields.  It means that when the outer message is initially parsed, the\n inner message's contents will not be parsed but instead stored in encoded\n form.  The inner message will actually be parsed when it is first accessed.\n\n This is only a hint.  Implementations are free to choose whether to use\n eager or lazy parsing regardless of the value of this option.  However,\n setting this option true suggests that the protocol author believes that\n using lazy parsing on this field is worth the additional bookkeeping\n overhead typically needed to implement it.\n\n This option does not affect the public interface of any generated code;\n all method signatures remain the same.  Furthermore, thread-safety of the\n interface is not affected by this option; const methods remain safe to\n call from multiple threads concurrently, while non-const methods continue\n to require exclusive access.\n\n\n Note that implementations may choose not to check required fields within\n a lazy sub-message.  That is, calling IsInitialized() on the outer message\n may return true even if the inner message has missing required fields.\n This is necessary because otherwise the inner message would have to be\n parsed in order to perform the check, defeating the purpose of lazy\n parsing.  An implementation which chooses not to check required fields\n must be consistent about it.  That is, for any particular sub-message, the\n implementation must either *always* check its required fields, or *never*\n check its required fields, regardless of whether or not the message has\n been parsed.\n"},{"path":[4,12,2,3,4],"span":[606,2,10]},{"path":[4,12,2,3,5],"span":[606,11,15]},{"path":[4,12,2,3,1],"span":[606,16,20]},{"path":[4,12,2,3,3],"span":[606,23,24]},{"path":[4,12,2,3,8],"span":[606,25,42]},{"path":[4,12,2,3,7],"span":[606,26,41]},{"path":[4,12,2,4],"span":[612,2,49],"leadingComments":" Is this field deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for accessors, or it will be completely ignored; in the very least, this\n is a formalization for deprecating fields.\n"},{"path":[4,12,2,4,4],"span":[612,2,10]},{"path":[4,12,2,4,5],"span":[612,11,15]},{"path":[4,12,2,4,1],"span":[612,16,26]},{"path":[4,12,2,4,3],"span":[612,29,30]},{"path":[4,12,2,4,8],"span":[612,31,48]},{"path":[4,12,2,4,7],"span":[612,32,47]},{"path":[4,12,2,5],"span":[615,2,44],"leadingComments":" For Google-internal migration only. Do not use.\n"},{"path":[4,12,2,5,4],"span":[615,2,10]},{"path":[4,12,2,5,5],"span":[615,11,15]},{"path":[4,12,2,5,1],"span":[615,16,20]},{"path":[4,12,2,5,3],"span":[615,23,25]},{"path":[4,12,2,5,8],"span":[615,26,43]},{"path":[4,12,2,5,7],"span":[615,27,42]},{"path":[4,12,2,6],"span":[619,2,58],"leadingComments":" The parser stores options it doesn't recognize here. See above.\n"},{"path":[4,12,2,6,4],"span":[619,2,10]},{"path":[4,12,2,6,6],"span":[619,11,30]},{"path":[4,12,2,6,1],"span":[619,31,51]},{"path":[4,12,2,6,3],"span":[619,54,57]},{"path":[4,12,5],"span":[622,2,25],"leadingComments":" Clients can define custom options in extensions of this message. See above.\n"},{"path":[4,12,5,0],"span":[622,13,24]},{"path":[4,12,5,0,1],"span":[622,13,17]},{"path":[4,12,5,0,2],"span":[622,21,24]},{"path":[4,12,9],"span":[624,2,13],"trailingComments":" removed jtype\n"},{"path":[4,12,9,0],"span":[624,11,12]},{"path":[4,12,9,0,1],"span":[624,11,12]},{"path":[4,13],"span":[627,0,633,1]},{"path":[4,13,1],"span":[627,8,20]},{"path":[4,13,2,0],"span":[629,2,58],"leadingComments":" The parser stores options it doesn't recognize here. See above.\n"},{"path":[4,13,2,0,4],"span":[629,2,10]},{"path":[4,13,2,0,6],"span":[629,11,30]},{"path":[4,13,2,0,1],"span":[629,31,51]},{"path":[4,13,2,0,3],"span":[629,54,57]},{"path":[4,13,5],"span":[632,2,25],"leadingComments":" Clients can define custom options in extensions of this message. See above.\n"},{"path":[4,13,5,0],"span":[632,13,24]},{"path":[4,13,5,0,1],"span":[632,13,17]},{"path":[4,13,5,0,2],"span":[632,21,24]},{"path":[4,14],"span":[635,0,654,1]},{"path":[4,14,1],"span":[635,8,19]},{"path":[4,14,2,0],"span":[639,2,32],"leadingComments":" Set this option to true to allow mapping different tag names to the same\n value.\n"},{"path":[4,14,2,0,4],"span":[639,2,10]},{"path":[4,14,2,0,5],"span":[639,11,15]},{"path":[4,14,2,0,1],"span":[639,16,27]},{"path":[4,14,2,0,3],"span":[639,30,31]},{"path":[4,14,2,1],"span":[645,2,49],"leadingComments":" Is this enum deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the enum, or it will be completely ignored; in the very least, this\n is a formalization for deprecating enums.\n"},{"path":[4,14,2,1,4],"span":[645,2,10]},{"path":[4,14,2,1,5],"span":[645,11,15]},{"path":[4,14,2,1,1],"span":[645,16,26]},{"path":[4,14,2,1,3],"span":[645,29,30]},{"path":[4,14,2,1,8],"span":[645,31,48]},{"path":[4,14,2,1,7],"span":[645,32,47]},{"path":[4,14,9],"span":[647,2,13],"trailingComments":" javanano_as_lite\n"},{"path":[4,14,9,0],"span":[647,11,12]},{"path":[4,14,9,0,1],"span":[647,11,12]},{"path":[4,14,2,2],"span":[650,2,58],"leadingComments":" The parser stores options it doesn't recognize here. See above.\n"},{"path":[4,14,2,2,4],"span":[650,2,10]},{"path":[4,14,2,2,6],"span":[650,11,30]},{"path":[4,14,2,2,1],"span":[650,31,51]},{"path":[4,14,2,2,3],"span":[650,54,57]},{"path":[4,14,5],"span":[653,2,25],"leadingComments":" Clients can define custom options in extensions of this message. See above.\n"},{"path":[4,14,5,0],"span":[653,13,24]},{"path":[4,14,5,0,1],"span":[653,13,17]},{"path":[4,14,5,0,2],"span":[653,21,24]},{"path":[4,15],"span":[656,0,668,1]},{"path":[4,15,1],"span":[656,8,24]},{"path":[4,15,2,0],"span":[661,2,49],"leadingComments":" Is this enum value deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the enum value, or it will be completely ignored; in the very least,\n this is a formalization for deprecating enum values.\n"},{"path":[4,15,2,0,4],"span":[661,2,10]},{"path":[4,15,2,0,5],"span":[661,11,15]},{"path":[4,15,2,0,1],"span":[661,16,26]},{"path":[4,15,2,0,3],"span":[661,29,30]},{"path":[4,15,2,0,8],"span":[661,31,48]},{"path":[4,15,2,0,7],"span":[661,32,47]},{"path":[4,15,2,1],"span":[664,2,58],"leadingComments":" The parser stores options it doesn't recognize here. See above.\n"},{"path":[4,15,2,1,4],"span":[664,2,10]},{"path":[4,15,2,1,6],"span":[664,11,30]},{"path":[4,15,2,1,1],"span":[664,31,51]},{"path":[4,15,2,1,3],"span":[664,54,57]},{"path":[4,15,5],"span":[667,2,25],"leadingComments":" Clients can define custom options in extensions of this message. See above.\n"},{"path":[4,15,5,0],"span":[667,13,24]},{"path":[4,15,5,0,1],"span":[667,13,17]},{"path":[4,15,5,0,2],"span":[667,21,24]},{"path":[4,16],"span":[670,0,688,1]},{"path":[4,16,1],"span":[670,8,22]},{"path":[4,16,2,0],"span":[681,2,50],"leadingComments":" Is this service deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the service, or it will be completely ignored; in the very least,\n this is a formalization for deprecating services.\n","leadingDetachedComments":[" Note:  Field numbers 1 through 32 are reserved for Google's internal RPC\n   framework.  We apologize for hoarding these numbers to ourselves, but\n   we were already using them long before we decided to release Protocol\n   Buffers.\n"]},{"path":[4,16,2,0,4],"span":[681,2,10]},{"path":[4,16,2,0,5],"span":[681,11,15]},{"path":[4,16,2,0,1],"span":[681,16,26]},{"path":[4,16,2,0,3],"span":[681,29,31]},{"path":[4,16,2,0,8],"span":[681,32,49]},{"path":[4,16,2,0,7],"span":[681,33,48]},{"path":[4,16,2,1],"span":[684,2,58],"leadingComments":" The parser stores options it doesn't recognize here. See above.\n"},{"path":[4,16,2,1,4],"span":[684,2,10]},{"path":[4,16,2,1,6],"span":[684,11,30]},{"path":[4,16,2,1,1],"span":[684,31,51]},{"path":[4,16,2,1,3],"span":[684,54,57]},{"path":[4,16,5],"span":[687,2,25],"leadingComments":" Clients can define custom options in extensions of this message. See above.\n"},{"path":[4,16,5,0],"span":[687,13,24]},{"path":[4,16,5,0,1],"span":[687,13,17]},{"path":[4,16,5,0,2],"span":[687,21,24]},{"path":[4,17],"span":[690,0,719,1]},{"path":[4,17,1],"span":[690,8,21]},{"path":[4,17,2,0],"span":[701,2,50],"leadingComments":" Is this method deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the method, or it will be completely ignored; in the very least,\n this is a formalization for deprecating methods.\n","leadingDetachedComments":[" Note:  Field numbers 1 through 32 are reserved for Google's internal RPC\n   framework.  We apologize for hoarding these numbers to ourselves, but\n   we were already using them long before we decided to release Protocol\n   Buffers.\n"]},{"path":[4,17,2,0,4],"span":[701,2,10]},{"path":[4,17,2,0,5],"span":[701,11,15]},{"path":[4,17,2,0,1],"span":[701,16,26]},{"path":[4,17,2,0,3],"span":[701,29,31]},{"path":[4,17,2,0,8],"span":[701,32,49]},{"path":[4,17,2,0,7],"span":[701,33,48]},{"path":[4,17,4,0],"span":[706,2,710,3],"leadingComments":" Is this method side-effect-free (or safe in HTTP parlance), or idempotent,\n or neither? HTTP based RPC implementation may choose GET verb for safe\n methods, and PUT verb for idempotent methods instead of the default POST.\n"},{"path":[4,17,4,0,1],"span":[706,7,23]},{"path":[4,17,4,0,2,0],"span":[707,4,28]},{"path":[4,17,4,0,2,0,1],"span":[707,4,23]},{"path":[4,17,4,0,2,0,2],"span":[707,26,27]},{"path":[4,17,4,0,2,1],"span":[708,4,24],"trailingComments":" implies idempotent\n"},{"path":[4,17,4,0,2,1,1],"span":[708,4,19]},{"path":[4,17,4,0,2,1,2],"span":[708,22,23]},{"path":[4,17,4,0,2,2],"span":[709,4,19],"trailingComments":" idempotent, but may have side effects\n"},{"path":[4,17,4,0,2,2,1],"span":[709,4,14]},{"path":[4,17,4,0,2,2,2],"span":[709,17,18]},{"path":[4,17,2,1],"span":[711,2,712,38]},{"path":[4,17,2,1,4],"span":[711,2,10]},{"path":[4,17,2,1,6],"span":[711,11,27]},{"path":[4,17,2,1,1],"span":[711,28,45]},{"path":[4,17,2,1,3],"span":[711,48,50]},{"path":[4,17,2,1,8],"span":[712,6,37]},{"path":[4,17,2,1,7],"span":[712,7,36]},{"path":[4,17,2,2],"span":[715,2,58],"leadingComments":" The parser stores options it doesn't recognize here. See above.\n"},{"path":[4,17,2,2,4],"span":[715,2,10]},{"path":[4,17,2,2,6],"span":[715,11,30]},{"path":[4,17,2,2,1],"span":[715,31,51]},{"path":[4,17,2,2,3],"span":[715,54,57]},{"path":[4,17,5],"span":[718,2,25],"leadingComments":" Clients can define custom options in extensions of this message. See above.\n"},{"path":[4,17,5,0],"span":[718,13,24]},{"path":[4,17,5,0,1],"span":[718,13,17]},{"path":[4,17,5,0,2],"span":[718,21,24]},{"path":[4,18],"span":[728,0,748,1],"leadingComments":" A message representing a option the parser does not recognize. This only\n appears in options protos created by the compiler::Parser class.\n DescriptorPool resolves these when building Descriptor objects. Therefore,\n options protos in descriptor objects (e.g. returned by Descriptor::options(),\n or produced by Descriptor::CopyTo()) will never have UninterpretedOptions\n in them.\n"},{"path":[4,18,1],"span":[728,8,27]},{"path":[4,18,3,0],"span":[734,2,737,3],"leadingComments":" The name of the uninterpreted option.  Each string represents a segment in\n a dot-separated name.  is_extension is true iff a segment represents an\n extension (denoted with parentheses in options specs in .proto files).\n E.g.,{ [\"foo\", false], [\"bar.baz\", true], [\"qux\", false] } represents\n \"foo.(bar.baz).qux\".\n"},{"path":[4,18,3,0,1],"span":[734,10,18]},{"path":[4,18,3,0,2,0],"span":[735,4,34]},{"path":[4,18,3,0,2,0,4],"span":[735,4,12]},{"path":[4,18,3,0,2,0,5],"span":[735,13,19]},{"path":[4,18,3,0,2,0,1],"span":[735,20,29]},{"path":[4,18,3,0,2,0,3],"span":[735,32,33]},{"path":[4,18,3,0,2,1],"span":[736,4,35]},{"path":[4,18,3,0,2,1,4],"span":[736,4,12]},{"path":[4,18,3,0,2,1,5],"span":[736,13,17]},{"path":[4,18,3,0,2,1,1],"span":[736,18,30]},{"path":[4,18,3,0,2,1,3],"span":[736,33,34]},{"path":[4,18,2,0],"span":[738,2,29]},{"path":[4,18,2,0,4],"span":[738,2,10]},{"path":[4,18,2,0,6],"span":[738,11,19]},{"path":[4,18,2,0,1],"span":[738,20,24]},{"path":[4,18,2,0,3],"span":[738,27,28]},{"path":[4,18,2,1],"span":[742,2,39],"leadingComments":" The value of the uninterpreted option, in whatever type the tokenizer\n identified it as during parsing. Exactly one of these should be set.\n"},{"path":[4,18,2,1,4],"span":[742,2,10]},{"path":[4,18,2,1,5],"span":[742,11,17]},{"path":[4,18,2,1,1],"span":[742,18,34]},{"path":[4,18,2,1,3],"span":[742,37,38]},{"path":[4,18,2,2],"span":[743,2,41]},{"path":[4,18,2,2,4],"span":[743,2,10]},{"path":[4,18,2,2,5],"span":[743,11,17]},{"path":[4,18,2,2,1],"span":[743,18,36]},{"path":[4,18,2,2,3],"span":[743,39,40]},{"path":[4,18,2,3],"span":[744,2,40]},{"path":[4,18,2,3,4],"span":[744,2,10]},{"path":[4,18,2,3,5],"span":[744,11,16]},{"path":[4,18,2,3,1],"span":[744,17,35]},{"path":[4,18,2,3,3],"span":[744,38,39]},{"path":[4,18,2,4],"span":[745,2,35]},{"path":[4,18,2,4,4],"span":[745,2,10]},{"path":[4,18,2,4,5],"span":[745,11,17]},{"path":[4,18,2,4,1],"span":[745,18,30]},{"path":[4,18,2,4,3],"span":[745,33,34]},{"path":[4,18,2,5],"span":[746,2,34]},{"path":[4,18,2,5,4],"span":[746,2,10]},{"path":[4,18,2,5,5],"span":[746,11,16]},{"path":[4,18,2,5,1],"span":[746,17,29]},{"path":[4,18,2,5,3],"span":[746,32,33]},{"path":[4,18,2,6],"span":[747,2,38]},{"path":[4,18,2,6,4],"span":[747,2,10]},{"path":[4,18,2,6,5],"span":[747,11,17]},{"path":[4,18,2,6,1],"span":[747,18,33]},{"path":[4,18,2,6,3],"span":[747,36,37]},{"path":[4,19],"span":[755,0,884,1],"leadingComments":" Encapsulates information about the original source file from which a\n FileDescriptorProto was generated.\n","leadingDetachedComments":[" ===================================================================\n Optional source code info\n"]},{"path":[4,19,1],"span":[755,8,22]},{"path":[4,19,2,0],"span":[799,2,33],"leadingComments":" A Location identifies a piece of source code in a .proto file which\n corresponds to a particular definition.  This information is intended\n to be useful to IDEs, code indexers, documentation generators, and similar\n tools.\n\n For example, say we have a file like:\n   message Foo {\n     optional string foo = 1;\n   }\n Let's look at just the field definition:\n   optional string foo = 1;\n   ^       ^^     ^^  ^  ^^^\n   a       bc     de  f  ghi\n We have the following locations:\n   span   path               represents\n   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.\n   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).\n   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).\n   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).\n   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).\n\n Notes:\n - A location may refer to a repeated field itself (i.e. not to any\n   particular index within it).  This is used whenever a set of elements are\n   logically enclosed in a single code segment.  For example, an entire\n   extend block (possibly containing multiple extension definitions) will\n   have an outer location whose path refers to the \"extensions\" repeated\n   field without an index.\n - Multiple locations may have the same path.  This happens when a single\n   logical declaration is spread out across multiple places.  The most\n   obvious example is the \"extend\" block again -- there may be multiple\n   extend blocks in the same scope, each of which will have the same path.\n - A location's span is not always a subset of its parent's span.  For\n   example, the \"extendee\" of an extension declaration appears at the\n   beginning of the \"extend\" block and is shared by all extensions within\n   the block.\n - Just because a location's span is a subset of some other location's span\n   does not mean that it is a descendant.  For example, a \"group\" defines\n   both a type and a field in a single declaration.  Thus, the locations\n   corresponding to the type and field and their components will overlap.\n - Code which tries to interpret locations should probably be designed to\n   ignore those that it doesn't understand, as more types of locations could\n   be recorded in the future.\n"},{"path":[4,19,2,0,4],"span":[799,2,10]},{"path":[4,19,2,0,6],"span":[799,11,19]},{"path":[4,19,2,0,1],"span":[799,20,28]},{"path":[4,19,2,0,3],"span":[799,31,32]},{"path":[4,19,3,0],"span":[800,2,883,3]},{"path":[4,19,3,0,1],"span":[800,10,18]},{"path":[4,19,3,0,2,0],"span":[824,4,44],"leadingComments":" Identifies which part of the FileDescriptorProto was defined at this\n location.\n\n Each element is a field number or an index.  They form a path from\n the root FileDescriptorProto to the place where the definition.  For\n example, this path:\n   [ 4, 3, 2, 7, 1 ]\n refers to:\n   file.message_type(3)  // 4, 3\n       .field(7)         // 2, 7\n       .name()           // 1\n This is because FileDescriptorProto.message_type has field number 4:\n   repeated DescriptorProto message_type = 4;\n and DescriptorProto.field has field number 2:\n   repeated FieldDescriptorProto field = 2;\n and FieldDescriptorProto.name has field number 1:\n   optional string name = 1;\n\n Thus, the above path gives the location of a field name.  If we removed\n the last element:\n   [ 4, 3, 2, 7 ]\n this path refers to the whole field declaration (from the beginning\n of the label to the terminating semicolon).\n"},{"path":[4,19,3,0,2,0,4],"span":[824,4,12]},{"path":[4,19,3,0,2,0,5],"span":[824,13,18]},{"path":[4,19,3,0,2,0,1],"span":[824,19,23]},{"path":[4,19,3,0,2,0,3],"span":[824,26,27]},{"path":[4,19,3,0,2,0,8],"span":[824,28,43]},{"path":[4,19,3,0,2,0,8,2],"span":[824,29,42]},{"path":[4,19,3,0,2,1],"span":[831,4,44],"leadingComments":" Always has exactly three or four elements: start line, start column,\n end line (optional, otherwise assumed same as start line), end column.\n These are packed into a single field for efficiency.  Note that line\n and column numbers are zero-based -- typically you will want to add\n 1 to each before displaying to a user.\n"},{"path":[4,19,3,0,2,1,4],"span":[831,4,12]},{"path":[4,19,3,0,2,1,5],"span":[831,13,18]},{"path":[4,19,3,0,2,1,1],"span":[831,19,23]},{"path":[4,19,3,0,2,1,3],"span":[831,26,27]},{"path":[4,19,3,0,2,1,8],"span":[831,28,43]},{"path":[4,19,3,0,2,1,8,2],"span":[831,29,42]},{"path":[4,19,3,0,2,2],"span":[880,4,41],"leadingComments":" If this SourceCodeInfo represents a complete declaration, these are any\n comments appearing before and after the declaration which appear to be\n attached to the declaration.\n\n A series of line comments appearing on consecutive lines, with no other\n tokens appearing on those lines, will be treated as a single comment.\n\n leading_detached_comments will keep paragraphs of comments that appear\n before (but not connected to) the current element. Each paragraph,\n separated by empty lines, will be one comment element in the repeated\n field.\n\n Only the comment content is provided; comment markers (e.g. //) are\n stripped out.  For block comments, leading whitespace and an asterisk\n will be stripped from the beginning of each line other than the first.\n Newlines are included in the output.\n\n Examples:\n\n   optional int32 foo = 1;  // Comment attached to foo.\n   // Comment attached to bar.\n   optional int32 bar = 2;\n\n   optional string baz = 3;\n   // Comment attached to baz.\n   // Another line attached to baz.\n\n   // Comment attached to qux.\n   //\n   // Another line attached to qux.\n   optional double qux = 4;\n\n   // Detached comment for corge. This is not leading or trailing comments\n   // to qux or corge because there are blank lines separating it from\n   // both.\n\n   // Detached comment for corge paragraph 2.\n\n   optional string corge = 5;\n   /* Block comment attached\n    * to corge.  Leading asterisks\n    * will be removed. */\n   /* Block comment attached to\n    * grault. */\n   optional int32 grault = 6;\n\n   // ignored detached comments.\n"},{"path":[4,19,3,0,2,2,4],"span":[880,4,12]},{"path":[4,19,3,0,2,2,5],"span":[880,13,19]},{"path":[4,19,3,0,2,2,1],"span":[880,20,36]},{"path":[4,19,3,0,2,2,3],"span":[880,39,40]},{"path":[4,19,3,0,2,3],"span":[881,4,42]},{"path":[4,19,3,0,2,3,4],"span":[881,4,12]},{"path":[4,19,3,0,2,3,5],"span":[881,13,19]},{"path":[4,19,3,0,2,3,1],"span":[881,20,37]},{"path":[4,19,3,0,2,3,3],"span":[881,40,41]},{"path":[4,19,3,0,2,4],"span":[882,4,50]},{"path":[4,19,3,0,2,4,4],"span":[882,4,12]},{"path":[4,19,3,0,2,4,5],"span":[882,13,19]},{"path":[4,19,3,0,2,4,1],"span":[882,20,45]},{"path":[4,19,3,0,2,4,3],"span":[882,48,49]},{"path":[4,20],"span":[889,0,910,1],"leadingComments":" Describes the relationship between generated code and its original source\n file. A GeneratedCodeInfo message is associated with only one generated\n source file, but may contain references to different source .proto files.\n"},{"path":[4,20,1],"span":[889,8,25]},{"path":[4,20,2,0],"span":[892,2,37],"leadingComments":" An Annotation connects some span of text in generated code to an element\n of its generating .proto file.\n"},{"path":[4,20,2,0,4],"span":[892,2,10]},{"path":[4,20,2,0,6],"span":[892,11,21]},{"path":[4,20,2,0,1],"span":[892,22,32]},{"path":[4,20,2,0,3],"span":[892,35,36]},{"path":[4,20,3,0],"span":[893,2,909,3]},{"path":[4,20,3,0,1],"span":[893,10,20]},{"path":[4,20,3,0,2,0],"span":[896,4,44],"leadingComments":" Identifies the element in the original source .proto file. This field\n is formatted the same as SourceCodeInfo.Location.path.\n"},{"path":[4,20,3,0,2,0,4],"span":[896,4,12]},{"path":[4,20,3,0,2,0,5],"span":[896,13,18]},{"path":[4,20,3,0,2,0,1],"span":[896,19,23]},{"path":[4,20,3,0,2,0,3],"span":[896,26,27]},{"path":[4,20,3,0,2,0,8],"span":[896,28,43]},{"path":[4,20,3,0,2,0,8,2],"span":[896,29,42]},{"path":[4,20,3,0,2,1],"span":[899,4,36],"leadingComments":" Identifies the filesystem path to the original source .proto.\n"},{"path":[4,20,3,0,2,1,4],"span":[899,4,12]},{"path":[4,20,3,0,2,1,5],"span":[899,13,19]},{"path":[4,20,3,0,2,1,1],"span":[899,20,31]},{"path":[4,20,3,0,2,1,3],"span":[899,34,35]},{"path":[4,20,3,0,2,2],"span":[903,4,29],"leadingComments":" Identifies the starting offset in bytes in the generated code\n that relates to the identified object.\n"},{"path":[4,20,3,0,2,2,4],"span":[903,4,12]},{"path":[4,20,3,0,2,2,5],"span":[903,13,18]},{"path":[4,20,3,0,2,2,1],"span":[903,19,24]},{"path":[4,20,3,0,2,2,3],"span":[903,27,28]},{"path":[4,20,3,0,2,3],"span":[908,4,27],"leadingComments":" Identifies the ending offset in bytes in the generated code that\n relates to the identified offset. The end offset should be one past\n the last relevant byte (so the length of the text = end - begin).\n"},{"path":[4,20,3,0,2,3,4],"span":[908,4,12]},{"path":[4,20,3,0,2,3,5],"span":[908,13,18]},{"path":[4,20,3,0,2,3,1],"span":[908,19,22]},{"path":[4,20,3,0,2,3,3],"span":[908,25,26]}]},"bufExtension":{"isImport":true,"isSyntaxUnspecified":false}},{"name":"elide/model/model.proto","package":"model","dependency":["google/protobuf/descriptor.proto"],"messageType":[{"name":"DatapointOptions","field":[{"name":"visibility","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".model.Visibility","jsonName":"visibility"},{"name":"required","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"required"},{"name":"concrete","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"concrete"},{"name":"ephemeral","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"ephemeral"}]},{"name":"PersistenceOptions","field":[{"name":"mode","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".model.CollectionMode","jsonName":"mode"},{"name":"path","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"path"},{"name":"parent","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"parent"}]},{"name":"TableOptions","field":[{"name":"name","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"name"},{"name":"description","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"description"}]},{"name":"SubmessageOptions","field":[{"name":"mode","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".model.CollectionMode","jsonName":"mode"},{"name":"concrete","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"concrete"},{"name":"path","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"path"},{"name":"embed","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"embed"}]},{"name":"FieldPersistenceOptions","field":[{"name":"type","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".model.FieldType","jsonName":"type"},{"name":"summary","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"summary"},{"name":"stamp_update","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"stampUpdate"},{"name":"stamp_create","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"stampCreate"},{"name":"read_only","number":5,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"readOnly"},{"name":"immutable","number":6,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"immutable"},{"name":"explicit","number":7,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"explicit"},{"name":"visibility","number":8,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".model.FieldVisibility","jsonName":"visibility"},{"name":"description","number":9,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"description","options":{"deprecated":true}}]},{"name":"BigQueryOptions","enumType":[{"name":"BigQueryType","value":[{"name":"UNSPECIFIED_TYPE","number":0,"options":{"deprecated":true}},{"name":"STRING","number":1},{"name":"NUMERIC","number":2},{"name":"FLOAT","number":3},{"name":"FLOAT64","number":4},{"name":"INTEGER","number":5},{"name":"INT64","number":6},{"name":"BYTES","number":7},{"name":"RECORD","number":8},{"name":"BOOLEAN","number":9},{"name":"GEOGRAPHY","number":10},{"name":"TIME","number":11},{"name":"DATE","number":12},{"name":"DATETIME","number":13},{"name":"TIMESTAMP","number":14},{"name":"JSON","number":99}]}]},{"name":"SpannerOptions","enumType":[{"name":"SpannerType","value":[{"name":"UNSPECIFIED_TYPE","number":0,"options":{"deprecated":true}},{"name":"STRING","number":1},{"name":"NUMERIC","number":2},{"name":"FLOAT64","number":3},{"name":"INT64","number":4},{"name":"BYTES","number":5},{"name":"BOOL","number":6},{"name":"DATE","number":7},{"name":"TIMESTAMP","number":8},{"name":"JSON","number":9}]}]},{"name":"TableFieldOptions","field":[{"name":"require","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"require"},{"name":"ignore","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"ignore"},{"name":"bqtype","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".model.BigQueryOptions.BigQueryType","jsonName":"bqtype"},{"name":"sptype","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".model.SpannerOptions.SpannerType","jsonName":"sptype"},{"name":"repeated","number":5,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"repeated"},{"name":"size","number":6,"label":"LABEL_OPTIONAL","type":"TYPE_UINT32","jsonName":"size"},{"name":"name","number":7,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"name"},{"name":"id","number":8,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"id"}]},{"name":"SpannerFieldOptions","field":[{"name":"column","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"column"},{"name":"ignore","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"ignore"},{"name":"type","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".model.SpannerOptions.SpannerType","jsonName":"type"},{"name":"json","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"json"},{"name":"size","number":5,"label":"LABEL_OPTIONAL","type":"TYPE_UINT32","jsonName":"size"},{"name":"nonnull","number":6,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"nonnull"},{"name":"expression","number":7,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"expression"},{"name":"stored","number":8,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"stored"},{"name":"primary_key","number":9,"label":"LABEL_OPTIONAL","type":"TYPE_BOOL","jsonName":"primaryKey"}]},{"name":"ObjectMapping","field":[{"name":"instance","number":1,"label":"LABEL_REPEATED","type":"TYPE_STRING","jsonName":"instance"}]}],"enumType":[{"name":"Visibility","value":[{"name":"PUBLIC","number":0},{"name":"PRIVATE","number":1},{"name":"PROTECTED","number":2},{"name":"PACKAGE","number":3},{"name":"EXPORT","number":4}]},{"name":"CollectionMode","value":[{"name":"NESTED","number":0},{"name":"COLLECTION","number":1},{"name":"GROUP","number":2}]},{"name":"FieldType","value":[{"name":"STANDARD","number":0},{"name":"KEY","number":1},{"name":"ID","number":2},{"name":"TAGS","number":3},{"name":"FLAGS","number":4},{"name":"REFERENCE","number":5},{"name":"TIMESTAMP","number":6},{"name":"PARENT","number":7},{"name":"PATH","number":8}]},{"name":"DatapointType","value":[{"name":"OBJECT","number":0},{"name":"OBJECT_KEY","number":1},{"name":"EVENT","number":2},{"name":"TABLE","number":3},{"name":"WIRE","number":4},{"name":"HASH","number":5}]},{"name":"EnumeratedType","value":[{"name":"GENERIC_ENUMERATION","number":0},{"name":"ERRORS","number":1}]},{"name":"FieldVisibility","value":[{"name":"DEFAULT_VISIBILITY","number":0},{"name":"OPEN","number":1},{"name":"AUTHORIZED","number":2},{"name":"OWNER","number":3},{"name":"INTERNAL","number":4}]}],"extension":[{"name":"role","number":6000,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".model.DatapointType","extendee":".google.protobuf.MessageOptions","jsonName":"role"},{"name":"db","number":6001,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".model.PersistenceOptions","extendee":".google.protobuf.MessageOptions","jsonName":"db"},{"name":"table","number":6002,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".model.TableOptions","extendee":".google.protobuf.MessageOptions","jsonName":"table"},{"name":"map","number":6003,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".model.ObjectMapping","extendee":".google.protobuf.MessageOptions","jsonName":"map"},{"name":"msg","number":6004,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".model.DatapointOptions","extendee":".google.protobuf.MessageOptions","jsonName":"msg"},{"name":"field","number":7000,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".model.FieldPersistenceOptions","extendee":".google.protobuf.FieldOptions","jsonName":"field"},{"name":"column","number":7001,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".model.TableFieldOptions","extendee":".google.protobuf.FieldOptions","jsonName":"column"},{"name":"collection","number":7002,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".model.SubmessageOptions","extendee":".google.protobuf.FieldOptions","jsonName":"collection"},{"name":"opts","number":7003,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".model.DatapointOptions","extendee":".google.protobuf.FieldOptions","jsonName":"opts"},{"name":"id","number":7004,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","extendee":".google.protobuf.FieldOptions","jsonName":"id"},{"name":"spanner","number":7005,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".model.SpannerFieldOptions","extendee":".google.protobuf.FieldOptions","jsonName":"spanner"},{"name":"label","number":8003,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","extendee":".google.protobuf.EnumValueOptions","jsonName":"label"},{"name":"alias","number":8005,"label":"LABEL_REPEATED","type":"TYPE_STRING","extendee":".google.protobuf.EnumValueOptions","jsonName":"alias"},{"name":"value","number":8007,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".model.DatapointOptions","extendee":".google.protobuf.EnumValueOptions","jsonName":"value"},{"name":"enum_role","number":9000,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".model.EnumeratedType","extendee":".google.protobuf.EnumOptions","jsonName":"enumRole"},{"name":"enumeration","number":9001,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".model.DatapointOptions","extendee":".google.protobuf.EnumOptions","jsonName":"enumeration"}],"options":{"javaPackage":"tools.elide.model","javaOuterClassname":"Datamodel","javaMultipleFiles":true,"javaStringCheckUtf8":true,"optimizeFor":"SPEED","goPackage":"github.com/elide-tools/elide/model/datamodel;datamodel","ccEnableArenas":true,"objcClassPrefix":"ELD","csharpNamespace":"Elide.Model","swiftPrefix":"Elide","phpClassPrefix":"ELD","phpNamespace":"Elide","rubyPackage":"Elide::Model"},"sourceCodeInfo":{"location":[{"span":[17,0,480,1]},{"path":[12],"span":[17,0,18],"leadingComments":"\n Specifies structures that relate to data modeling and the structure of the data. Enumerates collection mode and field\n type, required status, and so on. Also includes field metadata (like summaries, descriptions, and so on).\n","leadingDetachedComments":["\n Copyright © 2022, The Elide Framework Authors. All rights reserved.\n\n The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,\n are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of\n this code in object or source form requires and implies consent and agreement to that license in principle and\n practice. Source or object code not listing this header, or unless specified otherwise, remain the property of\n Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to\n Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected\n by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,\n is strictly forbidden except in adherence with assigned license requirements.\n"]},{"path":[2],"span":[18,0,14]},{"path":[8],"span":[20,0,28]},{"path":[8,9],"span":[20,0,28]},{"path":[8],"span":[21,0,31]},{"path":[8,31],"span":[21,0,31]},{"path":[8],"span":[22,0,34]},{"path":[8,10],"span":[22,0,34]},{"path":[8],"span":[23,0,37]},{"path":[8,27],"span":[23,0,37]},{"path":[8],"span":[24,0,42]},{"path":[8,8],"span":[24,0,42]},{"path":[8],"span":[25,0,31]},{"path":[8,41],"span":[25,0,31]},{"path":[8],"span":[26,0,32]},{"path":[8,40],"span":[26,0,32]},{"path":[8],"span":[27,0,30]},{"path":[8,39],"span":[27,0,30]},{"path":[8],"span":[28,0,33]},{"path":[8,36],"span":[28,0,33]},{"path":[8],"span":[29,0,37]},{"path":[8,45],"span":[29,0,37]},{"path":[8],"span":[30,0,42]},{"path":[8,1],"span":[30,0,42]},{"path":[8],"span":[31,0,40]},{"path":[8,37],"span":[31,0,40]},{"path":[8],"span":[32,0,77]},{"path":[8,11],"span":[32,0,77]},{"path":[3,0],"span":[34,0,42]},{"path":[5,0],"span":[40,0,55,1],"leadingComments":" Sets the visibility of a given object and its constituent properties, in circumstances where the object is served to\n a frontend client/agent. Depending on the visibility of a given property, it may or may not be emitted by an API\n service, or made available (or not) in the JS context.\n"},{"path":[5,0,1],"span":[40,5,15]},{"path":[5,0,2,0],"span":[42,2,13],"leadingComments":" Default visibility: the property or item is public.\n"},{"path":[5,0,2,0,1],"span":[42,2,8]},{"path":[5,0,2,0,2],"span":[42,11,12]},{"path":[5,0,2,1],"span":[45,2,14],"leadingComments":" Private visibility: only usable and addressable by itself, or associated items.\n"},{"path":[5,0,2,1,1],"span":[45,2,9]},{"path":[5,0,2,1,2],"span":[45,12,13]},{"path":[5,0,2,2],"span":[48,2,16],"leadingComments":" Protected visibility: children and other associated objects can access or address this item.\n"},{"path":[5,0,2,2,1],"span":[48,2,11]},{"path":[5,0,2,2,2],"span":[48,14,15]},{"path":[5,0,2,3],"span":[51,2,14],"leadingComments":" Package visibility: items or objects in the same package can access and address this item.\n"},{"path":[5,0,2,3,1],"span":[51,2,9]},{"path":[5,0,2,3,2],"span":[51,12,13]},{"path":[5,0,2,4],"span":[54,2,13],"leadingComments":" Export visibility: expose this item to the outer invoking context.\n"},{"path":[5,0,2,4,1],"span":[54,2,8]},{"path":[5,0,2,4,2],"span":[54,11,12]},{"path":[5,1],"span":[59,0,68,1],"leadingComments":" Specifies how a sub-object in a particular message should be persisted.\n"},{"path":[5,1,1],"span":[59,5,19]},{"path":[5,1,2,0],"span":[61,2,13],"leadingComments":" `NESTED` mode stores the specified collection within the parent document.\n"},{"path":[5,1,2,0,1],"span":[61,2,8]},{"path":[5,1,2,0,2],"span":[61,11,12]},{"path":[5,1,2,1],"span":[64,2,17],"leadingComments":" `COLLECTION` mode stores the specified collection as a sub-collection under the parent document.\n"},{"path":[5,1,2,1,1],"span":[64,2,12]},{"path":[5,1,2,1,2],"span":[64,15,16]},{"path":[5,1,2,2],"span":[67,2,12],"leadingComments":" `GROUP` mode stores the specified collection at the root of the data system.\n"},{"path":[5,1,2,2,1],"span":[67,2,7]},{"path":[5,1,2,2,2],"span":[67,10,11]},{"path":[5,2],"span":[73,0,100,1],"leadingComments":" Enumerates field handling special-cases. Fields may be annotated with these special types to change the way they are\n handled by the model mapping layer.\n"},{"path":[5,2,1],"span":[73,5,14]},{"path":[5,2,2,0],"span":[75,2,15],"leadingComments":" This is a standard field (default value).\n"},{"path":[5,2,2,0,1],"span":[75,2,10]},{"path":[5,2,2,0,2],"span":[75,13,14]},{"path":[5,2,2,1],"span":[78,2,10],"leadingComments":" This is a key field (a primary key sub-message) for a GROUP or COLLECTION-mode message.\n"},{"path":[5,2,2,1,1],"span":[78,2,5]},{"path":[5,2,2,1,2],"span":[78,8,9]},{"path":[5,2,2,2],"span":[81,2,9],"leadingComments":" This is an ID field that should be used as the final name of this document.\n"},{"path":[5,2,2,2,1],"span":[81,2,4]},{"path":[5,2,2,2,2],"span":[81,7,8]},{"path":[5,2,2,3],"span":[84,2,11],"leadingComments":" This is a tags-style field.\n"},{"path":[5,2,2,3,1],"span":[84,2,6]},{"path":[5,2,2,3,2],"span":[84,9,10]},{"path":[5,2,2,4],"span":[87,2,12],"leadingComments":" Store this object as a special flags-style mapping.\n"},{"path":[5,2,2,4,1],"span":[87,2,7]},{"path":[5,2,2,4,2],"span":[87,10,11]},{"path":[5,2,2,5],"span":[90,2,16],"leadingComments":" This key is a foreign reference.\n"},{"path":[5,2,2,5,1],"span":[90,2,11]},{"path":[5,2,2,5,2],"span":[90,14,15]},{"path":[5,2,2,6],"span":[93,2,16],"leadingComments":" This item is a timestamp.\n"},{"path":[5,2,2,6,1],"span":[93,2,11]},{"path":[5,2,2,6,2],"span":[93,14,15]},{"path":[5,2,2,7],"span":[96,2,13],"leadingComments":" This field represents a key for this item's parent.\n"},{"path":[5,2,2,7,1],"span":[96,2,8]},{"path":[5,2,2,7,2],"span":[96,11,12]},{"path":[5,2,2,8],"span":[99,2,11],"leadingComments":" This field represents a full key path in hierarchical storage.\n"},{"path":[5,2,2,8,1],"span":[99,2,6]},{"path":[5,2,2,8,2],"span":[99,9,10]},{"path":[5,3],"span":[105,0,123,1],"leadingComments":" Specifies the types an object may use when defining special objects. These types govern how an object is treated,\n listed, and adapted throughout its lifecycle.\n"},{"path":[5,3,1],"span":[105,5,18]},{"path":[5,3,2,0],"span":[107,2,13],"leadingComments":" The datamodel represents an object record.\n"},{"path":[5,3,2,0,1],"span":[107,2,8]},{"path":[5,3,2,0,2],"span":[107,11,12]},{"path":[5,3,2,1],"span":[110,2,17],"leadingComments":" Specifies that this datapoint type is a record key.\n"},{"path":[5,3,2,1,1],"span":[110,2,12]},{"path":[5,3,2,1,2],"span":[110,15,16]},{"path":[5,3,2,2],"span":[113,2,12],"leadingComments":" The datamodel represents an event type.\n"},{"path":[5,3,2,2,1],"span":[113,2,7]},{"path":[5,3,2,2,2],"span":[113,10,11]},{"path":[5,3,2,3],"span":[116,2,12],"leadingComments":" The datamodel represents a table.\n"},{"path":[5,3,2,3,1],"span":[116,2,7]},{"path":[5,3,2,3,2],"span":[116,10,11]},{"path":[5,3,2,4],"span":[119,2,11],"leadingComments":" The datamodel represents a wire object.\n"},{"path":[5,3,2,4,1],"span":[119,2,6]},{"path":[5,3,2,4,2],"span":[119,9,10]},{"path":[5,3,2,5],"span":[122,2,11],"leadingComments":" The datamodel represents a hash pre-image.\n"},{"path":[5,3,2,5,1],"span":[122,2,6]},{"path":[5,3,2,5,2],"span":[122,9,10]},{"path":[5,4],"span":[128,0,134,1],"leadingComments":" Specifies a special role, if applicable, for a given enumerated type. Each selection governs some special behavior\n related to defined enums with APIs, databases, and so on.\n"},{"path":[5,4,1],"span":[128,5,19]},{"path":[5,4,2,0],"span":[130,2,26],"leadingComments":" Specifies a generic enumeration structure.\n"},{"path":[5,4,2,0,1],"span":[130,2,21]},{"path":[5,4,2,0,2],"span":[130,24,25]},{"path":[5,4,2,1],"span":[133,2,13],"leadingComments":" Specifies a structure which enumerates error states.\n"},{"path":[5,4,2,1,1],"span":[133,2,8]},{"path":[5,4,2,1,2],"span":[133,11,12]},{"path":[4,0],"span":[140,0,157,1],"leadingComments":" Options specified for a given datamodel point (which can be a message, a field, an enum, and so on), which describe\n how the object or field may be validated in various circumstances, and how it should be handled with regard to\n exposure visibility to invoking code.\n"},{"path":[4,0,1],"span":[140,8,24]},{"path":[4,0,2,0],"span":[143,2,28],"leadingComments":" Sets the visibility options for this data point. Depending on these options, a property or model may be exposed to\n invoking code, protected from rewriting, and so on.\n"},{"path":[4,0,2,0,6],"span":[143,2,12]},{"path":[4,0,2,0,1],"span":[143,13,23]},{"path":[4,0,2,0,3],"span":[143,26,27]},{"path":[4,0,2,1],"span":[147,2,20],"leadingComments":" Whether this data point (model or field or enum, etc) should be considered \"required\" for this model to be valid.\n This setting is applied in various circumstances, usually when data crosses API boundaries.\n"},{"path":[4,0,2,1,5],"span":[147,2,6]},{"path":[4,0,2,1,1],"span":[147,7,15]},{"path":[4,0,2,1,3],"span":[147,18,19]},{"path":[4,0,2,2],"span":[152,2,20],"leadingComments":" Whether this property contains a \"concrete\" sub-message, in which case, its properties are lifted to the parent\n entity. During decoding, a property is added to indicate the concrete selection made. This is usually combined with\n generic types in a one-of field, for instance, in `MenuProduct`.\n"},{"path":[4,0,2,2,5],"span":[152,2,6]},{"path":[4,0,2,2,1],"span":[152,7,15]},{"path":[4,0,2,2,3],"span":[152,18,19]},{"path":[4,0,2,3],"span":[156,2,21],"leadingComments":" Indicate to the data storage engine that a given field is ephemeral, and should not be stored, but rather held with\n a calculated value for use in systems upstream from the data storage layer.\n"},{"path":[4,0,2,3,5],"span":[156,2,6]},{"path":[4,0,2,3,1],"span":[156,7,16]},{"path":[4,0,2,3,3],"span":[156,19,20]},{"path":[4,1],"span":[162,0,171,1],"leadingComments":" Specifies options related to persistence of underlying model data associated with this particular message type. This\n includes settings related to Firestore and other data engines.\n"},{"path":[4,1,1],"span":[162,8,26]},{"path":[4,1,2,0],"span":[164,2,26],"leadingComments":" Specifies the storage mode for this entity.\n"},{"path":[4,1,2,0,6],"span":[164,2,16]},{"path":[4,1,2,0,1],"span":[164,17,21]},{"path":[4,1,2,0,3],"span":[164,24,25]},{"path":[4,1,2,1],"span":[167,2,18],"leadingComments":" Data path for a given message, with items in the URL corresponding to parameters in the item's key path.\n"},{"path":[4,1,2,1,5],"span":[167,2,8]},{"path":[4,1,2,1,1],"span":[167,9,13]},{"path":[4,1,2,1,3],"span":[167,16,17]},{"path":[4,1,2,2],"span":[170,2,20],"leadingComments":" Name of this item's parent collection, if applicable.\n"},{"path":[4,1,2,2,5],"span":[170,2,8]},{"path":[4,1,2,2,1],"span":[170,9,15]},{"path":[4,1,2,2,3],"span":[170,18,19]},{"path":[4,2],"span":[176,0,182,1],"leadingComments":" Options specific to model integration with table-style engines, where there can be a table name and/or description\n that should be mapped to a particular message structure.\n"},{"path":[4,2,1],"span":[176,8,20]},{"path":[4,2,2,0],"span":[178,2,18],"leadingComments":" Name of the table bound to this model.\n"},{"path":[4,2,2,0,5],"span":[178,2,8]},{"path":[4,2,2,0,1],"span":[178,9,13]},{"path":[4,2,2,0,3],"span":[178,16,17]},{"path":[4,2,2,1],"span":[181,2,25],"leadingComments":" Description for the table bound to this model.\n"},{"path":[4,2,2,1,5],"span":[181,2,8]},{"path":[4,2,2,1,1],"span":[181,9,20]},{"path":[4,2,2,1,3],"span":[181,23,24]},{"path":[4,3],"span":[186,0,199,1],"leadingComments":" Specifies options related to storing a sub-message.\n"},{"path":[4,3,1],"span":[186,8,25]},{"path":[4,3,2,0],"span":[188,2,26],"leadingComments":" Collection storage mode for the given sub-message field.\n"},{"path":[4,3,2,0,6],"span":[188,2,16]},{"path":[4,3,2,0,1],"span":[188,17,21]},{"path":[4,3,2,0,3],"span":[188,24,25]},{"path":[4,3,2,1],"span":[191,2,22],"leadingComments":" Concrete type name for this sub-message type.\n"},{"path":[4,3,2,1,5],"span":[191,2,8]},{"path":[4,3,2,1,1],"span":[191,9,17]},{"path":[4,3,2,1,3],"span":[191,20,21]},{"path":[4,3,2,2],"span":[194,2,18],"leadingComments":" Data path for the given sub-message field.\n"},{"path":[4,3,2,2,5],"span":[194,2,8]},{"path":[4,3,2,2,1],"span":[194,9,13]},{"path":[4,3,2,2,3],"span":[194,16,17]},{"path":[4,3,2,3],"span":[198,2,17],"leadingComments":" If the persistence node is in `COLLECTION` mode, this flag will embed it in the parent entity anyway. Useful in\n some circumstances where sub-listed data is for indexing, and fetching it repeatedly would be inefficient.\n"},{"path":[4,3,2,3,5],"span":[198,2,6]},{"path":[4,3,2,3,1],"span":[198,7,12]},{"path":[4,3,2,3,3],"span":[198,15,16]},{"path":[5,5],"span":[203,0,218,1],"leadingComments":" Describes the visibility options for a given field.\n"},{"path":[5,5,1],"span":[203,5,20]},{"path":[5,5,2,0],"span":[205,2,25],"leadingComments":" Default visibility level. No change to default behavior.\n"},{"path":[5,5,2,0,1],"span":[205,2,20]},{"path":[5,5,2,0,2],"span":[205,23,24]},{"path":[5,5,2,1],"span":[208,2,11],"leadingComments":" Denotes data that is fine to expose publicly.\n"},{"path":[5,5,2,1,1],"span":[208,2,6]},{"path":[5,5,2,1,2],"span":[208,9,10]},{"path":[5,5,2,2],"span":[211,2,17],"leadingComments":" Denotes data that should only be exposed to authorized users.\n"},{"path":[5,5,2,2,1],"span":[211,2,12]},{"path":[5,5,2,2,2],"span":[211,15,16]},{"path":[5,5,2,3],"span":[214,2,12],"leadingComments":" Denotes data that should only be exposed to users authorized by the owner.\n"},{"path":[5,5,2,3,1],"span":[214,2,7]},{"path":[5,5,2,3,2],"span":[214,10,11]},{"path":[5,5,2,4],"span":[217,2,15],"leadingComments":" Denotes data that should only be exposed internally.\n"},{"path":[5,5,2,4,1],"span":[217,2,10]},{"path":[5,5,2,4,2],"span":[217,13,14]},{"path":[4,4],"span":[222,0,257,1],"leadingComments":" Persistence/data engine options specific to an individual message field.\n"},{"path":[4,4,1],"span":[222,8,31]},{"path":[4,4,2,0],"span":[224,2,21],"leadingComments":" Field type, for special-case fields.\n"},{"path":[4,4,2,0,6],"span":[224,2,11]},{"path":[4,4,2,0,1],"span":[224,12,16]},{"path":[4,4,2,0,3],"span":[224,19,20]},{"path":[4,4,2,1],"span":[228,2,21],"leadingComments":" Summary for this field, which provides a narrative description. It should be suitable for use in external\n circumstances, like documentation.\n"},{"path":[4,4,2,1,5],"span":[228,2,8]},{"path":[4,4,2,1,1],"span":[228,9,16]},{"path":[4,4,2,1,3],"span":[228,19,20]},{"path":[4,4,2,2],"span":[232,2,24],"leadingComments":" This item is a timestamp, and we would like it to be automatically updated each time the model that contains it is\n modified in underlying storage. The field should be read-only.\n"},{"path":[4,4,2,2,5],"span":[232,2,6]},{"path":[4,4,2,2,1],"span":[232,7,19]},{"path":[4,4,2,2,3],"span":[232,22,23]},{"path":[4,4,2,3],"span":[236,2,24],"leadingComments":" This item is a timestamp, and we would like it to be automatically set when the model is created. After that point,\n we would like this field to be read-only.\n"},{"path":[4,4,2,3,5],"span":[236,2,6]},{"path":[4,4,2,3,1],"span":[236,7,19]},{"path":[4,4,2,3,3],"span":[236,22,23]},{"path":[4,4,2,4],"span":[240,2,21],"leadingComments":" This field should not allow writes, but rather produce its value dynamically. Fields marked in this manner cannot\n be set by external code at any point in time.\n"},{"path":[4,4,2,4,5],"span":[240,2,6]},{"path":[4,4,2,4,1],"span":[240,7,16]},{"path":[4,4,2,4,3],"span":[240,19,20]},{"path":[4,4,2,5],"span":[244,2,21],"leadingComments":" This field should allow writes when the model that contains it is written, but then, henceforth, the model should\n not allow this field to be mutated.\n"},{"path":[4,4,2,5,5],"span":[244,2,6]},{"path":[4,4,2,5,1],"span":[244,7,16]},{"path":[4,4,2,5,3],"span":[244,19,20]},{"path":[4,4,2,6],"span":[248,2,20],"leadingComments":" This field should always be explicitly listed with a value, even if it is set to the default value. This function\n is especially useful for enums with default values, when there is a desire to have consistent indexes.\n"},{"path":[4,4,2,6,5],"span":[248,2,6]},{"path":[4,4,2,6,1],"span":[248,7,15]},{"path":[4,4,2,6,3],"span":[248,18,19]},{"path":[4,4,2,7],"span":[253,2,33],"leadingComments":" Describes the visibility level of a given field in a tree of fields. This value applies recursively under message\n fields on which it is applied. Depending on the visibility level active when data is deserialized or serialized,\n certain data may be withheld corresponding to the invoking user or system's access level.\n"},{"path":[4,4,2,7,6],"span":[253,2,17]},{"path":[4,4,2,7,1],"span":[253,18,28]},{"path":[4,4,2,7,3],"span":[253,31,32]},{"path":[4,4,2,8],"span":[256,2,45],"leadingComments":" Provided for backwards compatibility. Do not use.\n"},{"path":[4,4,2,8,5],"span":[256,2,8]},{"path":[4,4,2,8,1],"span":[256,9,20]},{"path":[4,4,2,8,3],"span":[256,23,24]},{"path":[4,4,2,8,8],"span":[256,25,44]},{"path":[4,4,2,8,8,3],"span":[256,26,43]},{"path":[4,5],"span":[261,0,312,1],"leadingComments":" Defines options structures that relate to Google BigQuery.\n"},{"path":[4,5,1],"span":[261,8,23]},{"path":[4,5,4,0],"span":[263,2,311,3],"leadingComments":" Specifies types applicable to BigQuery property translation.\n"},{"path":[4,5,4,0,1],"span":[263,7,19]},{"path":[4,5,4,0,2,0],"span":[265,4,45],"leadingComments":" Unspecified type for Spanner fields.\n"},{"path":[4,5,4,0,2,0,1],"span":[265,4,20]},{"path":[4,5,4,0,2,0,2],"span":[265,23,24]},{"path":[4,5,4,0,2,0,3],"span":[265,25,44]},{"path":[4,5,4,0,2,0,3,1],"span":[265,26,43]},{"path":[4,5,4,0,2,1],"span":[268,4,15],"leadingComments":" Default concrete type for BigQuery columns: `STRING`.\n"},{"path":[4,5,4,0,2,1,1],"span":[268,4,10]},{"path":[4,5,4,0,2,1,2],"span":[268,13,14]},{"path":[4,5,4,0,2,2],"span":[271,4,16],"leadingComments":" `NUMERIC` type.\n"},{"path":[4,5,4,0,2,2,1],"span":[271,4,11]},{"path":[4,5,4,0,2,2,2],"span":[271,14,15]},{"path":[4,5,4,0,2,3],"span":[274,4,14],"leadingComments":" `FLOAT` type.\n"},{"path":[4,5,4,0,2,3,1],"span":[274,4,9]},{"path":[4,5,4,0,2,3,2],"span":[274,12,13]},{"path":[4,5,4,0,2,4],"span":[277,4,16],"leadingComments":" `FLOAT64` type.\n"},{"path":[4,5,4,0,2,4,1],"span":[277,4,11]},{"path":[4,5,4,0,2,4,2],"span":[277,14,15]},{"path":[4,5,4,0,2,5],"span":[280,4,16],"leadingComments":" `INTEGER` type.\n"},{"path":[4,5,4,0,2,5,1],"span":[280,4,11]},{"path":[4,5,4,0,2,5,2],"span":[280,14,15]},{"path":[4,5,4,0,2,6],"span":[283,4,14],"leadingComments":" `INT64` type.\n"},{"path":[4,5,4,0,2,6,1],"span":[283,4,9]},{"path":[4,5,4,0,2,6,2],"span":[283,12,13]},{"path":[4,5,4,0,2,7],"span":[286,4,14],"leadingComments":" `BYTES` type.\n"},{"path":[4,5,4,0,2,7,1],"span":[286,4,9]},{"path":[4,5,4,0,2,7,2],"span":[286,12,13]},{"path":[4,5,4,0,2,8],"span":[289,4,15],"leadingComments":" `RECORD` type.\n"},{"path":[4,5,4,0,2,8,1],"span":[289,4,10]},{"path":[4,5,4,0,2,8,2],"span":[289,13,14]},{"path":[4,5,4,0,2,9],"span":[292,4,16],"leadingComments":" `BOOLEAN` type.\n"},{"path":[4,5,4,0,2,9,1],"span":[292,4,11]},{"path":[4,5,4,0,2,9,2],"span":[292,14,15]},{"path":[4,5,4,0,2,10],"span":[295,4,19],"leadingComments":" `GEOGRAPHY` type.\n"},{"path":[4,5,4,0,2,10,1],"span":[295,4,13]},{"path":[4,5,4,0,2,10,2],"span":[295,16,18]},{"path":[4,5,4,0,2,11],"span":[298,4,14],"leadingComments":" `TIME` type.\n"},{"path":[4,5,4,0,2,11,1],"span":[298,4,8]},{"path":[4,5,4,0,2,11,2],"span":[298,11,13]},{"path":[4,5,4,0,2,12],"span":[301,4,14],"leadingComments":" `DATE` type.\n"},{"path":[4,5,4,0,2,12,1],"span":[301,4,8]},{"path":[4,5,4,0,2,12,2],"span":[301,11,13]},{"path":[4,5,4,0,2,13],"span":[304,4,18],"leadingComments":" `DATETIME` type.\n"},{"path":[4,5,4,0,2,13,1],"span":[304,4,12]},{"path":[4,5,4,0,2,13,2],"span":[304,15,17]},{"path":[4,5,4,0,2,14],"span":[307,4,19],"leadingComments":" `TIMESTAMP` type.\n"},{"path":[4,5,4,0,2,14,1],"span":[307,4,13]},{"path":[4,5,4,0,2,14,2],"span":[307,16,18]},{"path":[4,5,4,0,2,15],"span":[310,4,14],"leadingComments":" `JSON` (special type).\n"},{"path":[4,5,4,0,2,15,1],"span":[310,4,8]},{"path":[4,5,4,0,2,15,2],"span":[310,11,13]},{"path":[4,6],"span":[316,0,349,1],"leadingComments":" Defines options structures that relate to Google Cloud Spanner.\n"},{"path":[4,6,1],"span":[316,8,22]},{"path":[4,6,4,0],"span":[318,2,348,3],"leadingComments":" Specifies types applicable to Spanner property translation.\n"},{"path":[4,6,4,0,1],"span":[318,7,18]},{"path":[4,6,4,0,2,0],"span":[320,4,45],"leadingComments":" Unspecified type for Spanner fields.\n"},{"path":[4,6,4,0,2,0,1],"span":[320,4,20]},{"path":[4,6,4,0,2,0,2],"span":[320,23,24]},{"path":[4,6,4,0,2,0,3],"span":[320,25,44]},{"path":[4,6,4,0,2,0,3,1],"span":[320,26,43]},{"path":[4,6,4,0,2,1],"span":[323,4,15],"leadingComments":" `STRING` type.\n"},{"path":[4,6,4,0,2,1,1],"span":[323,4,10]},{"path":[4,6,4,0,2,1,2],"span":[323,13,14]},{"path":[4,6,4,0,2,2],"span":[326,4,16],"leadingComments":" `NUMERIC` type.\n"},{"path":[4,6,4,0,2,2,1],"span":[326,4,11]},{"path":[4,6,4,0,2,2,2],"span":[326,14,15]},{"path":[4,6,4,0,2,3],"span":[329,4,16],"leadingComments":" `FLOAT64` type.\n"},{"path":[4,6,4,0,2,3,1],"span":[329,4,11]},{"path":[4,6,4,0,2,3,2],"span":[329,14,15]},{"path":[4,6,4,0,2,4],"span":[332,4,14],"leadingComments":" `INT64` type.\n"},{"path":[4,6,4,0,2,4,1],"span":[332,4,9]},{"path":[4,6,4,0,2,4,2],"span":[332,12,13]},{"path":[4,6,4,0,2,5],"span":[335,4,14],"leadingComments":" `BYTES` type.\n"},{"path":[4,6,4,0,2,5,1],"span":[335,4,9]},{"path":[4,6,4,0,2,5,2],"span":[335,12,13]},{"path":[4,6,4,0,2,6],"span":[338,4,13],"leadingComments":" `BOOL` type.\n"},{"path":[4,6,4,0,2,6,1],"span":[338,4,8]},{"path":[4,6,4,0,2,6,2],"span":[338,11,12]},{"path":[4,6,4,0,2,7],"span":[341,4,13],"leadingComments":" `DATE` type.\n"},{"path":[4,6,4,0,2,7,1],"span":[341,4,8]},{"path":[4,6,4,0,2,7,2],"span":[341,11,12]},{"path":[4,6,4,0,2,8],"span":[344,4,18],"leadingComments":" `TIMESTAMP` type.\n"},{"path":[4,6,4,0,2,8,1],"span":[344,4,13]},{"path":[4,6,4,0,2,8,2],"span":[344,16,17]},{"path":[4,6,4,0,2,9],"span":[347,4,13],"leadingComments":" `JSON` (special type).\n"},{"path":[4,6,4,0,2,9,1],"span":[347,4,8]},{"path":[4,6,4,0,2,9,2],"span":[347,11,12]},{"path":[4,7],"span":[353,0,377,1],"leadingComments":" Specifies options specific to storing this field in a tabular-style data engine.\n"},{"path":[4,7,1],"span":[353,8,25]},{"path":[4,7,2,0],"span":[355,2,19],"leadingComments":" Marks this field as `REQUIRED` in tabular schemas.\n"},{"path":[4,7,2,0,5],"span":[355,2,6]},{"path":[4,7,2,0,1],"span":[355,7,14]},{"path":[4,7,2,0,3],"span":[355,17,18]},{"path":[4,7,2,1],"span":[358,2,18],"leadingComments":" Marks this field as ignored for serialization in tabular circumstances.\n"},{"path":[4,7,2,1,5],"span":[358,2,6]},{"path":[4,7,2,1,1],"span":[358,7,13]},{"path":[4,7,2,1,3],"span":[358,16,17]},{"path":[4,7,2,2],"span":[361,2,42],"leadingComments":" Overrides the BigQuery type associated with the exported form of this message field.\n"},{"path":[4,7,2,2,6],"span":[361,2,30]},{"path":[4,7,2,2,1],"span":[361,31,37]},{"path":[4,7,2,2,3],"span":[361,40,41]},{"path":[4,7,2,3],"span":[364,2,40],"leadingComments":" Overrides the Spanner type associated with the exported form of this message field.\n"},{"path":[4,7,2,3,6],"span":[364,2,28]},{"path":[4,7,2,3,1],"span":[364,29,35]},{"path":[4,7,2,3,3],"span":[364,38,39]},{"path":[4,7,2,4],"span":[367,2,20],"leadingComments":" Converts this field into a `REPEATED`-mode field in BigQuery.\n"},{"path":[4,7,2,4,5],"span":[367,2,6]},{"path":[4,7,2,4,1],"span":[367,7,15]},{"path":[4,7,2,4,3],"span":[367,18,19]},{"path":[4,7,2,5],"span":[370,2,18],"leadingComments":" Size of the field. Pass `0` (the default) for maximum width.\n"},{"path":[4,7,2,5,5],"span":[370,2,8]},{"path":[4,7,2,5,1],"span":[370,9,13]},{"path":[4,7,2,5,3],"span":[370,16,17]},{"path":[4,7,2,6],"span":[373,2,18],"leadingComments":" Name of the field in columnar circumstances.\n"},{"path":[4,7,2,6,5],"span":[373,2,8]},{"path":[4,7,2,6,1],"span":[373,9,13]},{"path":[4,7,2,6,3],"span":[373,16,17]},{"path":[4,7,2,7],"span":[376,2,16],"leadingComments":" Unique ID or path assigned to this field in a universally specified data model.\n"},{"path":[4,7,2,7,5],"span":[376,2,8]},{"path":[4,7,2,7,1],"span":[376,9,11]},{"path":[4,7,2,7,3],"span":[376,14,15]},{"path":[4,8],"span":[381,0,408,1],"leadingComments":" Extended options for use with Cloud Spanner, which may be affixed to an individual model field.\n"},{"path":[4,8,1],"span":[381,8,27]},{"path":[4,8,2,0],"span":[383,2,20],"leadingComments":" Override column name in Spanner only.\n"},{"path":[4,8,2,0,5],"span":[383,2,8]},{"path":[4,8,2,0,1],"span":[383,9,15]},{"path":[4,8,2,0,3],"span":[383,18,19]},{"path":[4,8,2,1],"span":[386,2,18],"leadingComments":" Whether to ignore this column in Spanner specifically.\n"},{"path":[4,8,2,1,5],"span":[386,2,6]},{"path":[4,8,2,1,1],"span":[386,7,13]},{"path":[4,8,2,1,3],"span":[386,16,17]},{"path":[4,8,2,2],"span":[389,2,38],"leadingComments":" Override the field type in Spanner only.\n"},{"path":[4,8,2,2,6],"span":[389,2,28]},{"path":[4,8,2,2,1],"span":[389,29,33]},{"path":[4,8,2,2,3],"span":[389,36,37]},{"path":[4,8,2,3],"span":[392,2,16],"leadingComments":" Override the field to store STRUCT objects as JSON.\n"},{"path":[4,8,2,3,5],"span":[392,2,6]},{"path":[4,8,2,3,1],"span":[392,7,11]},{"path":[4,8,2,3,3],"span":[392,14,15]},{"path":[4,8,2,4],"span":[395,2,18],"leadingComments":" Length of this field in the database, when expressed as a string.\n"},{"path":[4,8,2,4,5],"span":[395,2,8]},{"path":[4,8,2,4,1],"span":[395,9,13]},{"path":[4,8,2,4,3],"span":[395,16,17]},{"path":[4,8,2,5],"span":[398,2,19],"leadingComments":" Specifies this column as `NONNULL`, in which case you cannot store `NULL` values in this field.\n"},{"path":[4,8,2,5,5],"span":[398,2,6]},{"path":[4,8,2,5,1],"span":[398,7,14]},{"path":[4,8,2,5,3],"span":[398,17,18]},{"path":[4,8,2,6],"span":[401,2,24],"leadingComments":" Expression value for this field. Converts this field into a calculated value.\n"},{"path":[4,8,2,6,5],"span":[401,2,8]},{"path":[4,8,2,6,1],"span":[401,9,19]},{"path":[4,8,2,6,3],"span":[401,22,23]},{"path":[4,8,2,7],"span":[404,2,18],"leadingComments":" Specifies the `STORED` option for this field. Only applicable if an `expression` is present.\n"},{"path":[4,8,2,7,5],"span":[404,2,6]},{"path":[4,8,2,7,1],"span":[404,7,13]},{"path":[4,8,2,7,3],"span":[404,16,17]},{"path":[4,8,2,8],"span":[407,2,23],"leadingComments":" Marks a field as a member of a Spanner row's primary key.\n"},{"path":[4,8,2,8,5],"span":[407,2,6]},{"path":[4,8,2,8,1],"span":[407,7,18]},{"path":[4,8,2,8,3],"span":[407,21,22]},{"path":[4,9],"span":[412,0,415,1],"leadingComments":" Specifies mappings for an arbitrary protobuf message object.\n"},{"path":[4,9,1],"span":[412,8,21]},{"path":[4,9,2,0],"span":[414,2,31],"leadingComments":" Maps an enumeration instance to this object. Enumeration membership is contextual.\n"},{"path":[4,9,2,0,4],"span":[414,2,10]},{"path":[4,9,2,0,5],"span":[414,11,17]},{"path":[4,9,2,0,1],"span":[414,18,26]},{"path":[4,9,2,0,3],"span":[414,29,30]},{"path":[7],"span":[418,0,438,1]},{"path":[7,0],"span":[422,2,28],"leadingComments":" Specifies the type of datapoint represented by a given message entity. This can be `RECORD` (generally used for\n arbitrary datamodel objects), `EVENT` (specialized telemetry event records), `TABLE` (tabular data, generally used\n for analytics events / BigQuery).\n"},{"path":[7,0,2],"span":[418,7,37]},{"path":[7,0,6],"span":[422,2,15]},{"path":[7,0,1],"span":[422,16,20]},{"path":[7,0,3],"span":[422,23,27]},{"path":[7,1],"span":[425,2,31],"leadingComments":" Settings specific to how a particular message entity is stored in the underlying persistence engine.\n"},{"path":[7,1,2],"span":[418,7,37]},{"path":[7,1,6],"span":[425,2,20]},{"path":[7,1,1],"span":[425,21,23]},{"path":[7,1,3],"span":[425,26,30]},{"path":[7,2],"span":[429,2,28],"leadingComments":" Table-specific configuration for this message. Kicks in when engines are in play that observe or couch data in a\n table/row-style pattern. Usually used for integration with BigQuery.\n"},{"path":[7,2,2],"span":[418,7,37]},{"path":[7,2,6],"span":[429,2,14]},{"path":[7,2,1],"span":[429,15,20]},{"path":[7,2,3],"span":[429,23,27]},{"path":[7,3],"span":[433,2,27],"leadingComments":" Settings that determine meta-mappings between this message object and enumerated states, declared in a foreign\n structure. Foreign structure mappings are contextually defined by the invoking application.\n"},{"path":[7,3,2],"span":[418,7,37]},{"path":[7,3,6],"span":[433,2,15]},{"path":[7,3,1],"span":[433,16,19]},{"path":[7,3,3],"span":[433,22,26]},{"path":[7,4],"span":[437,2,30],"leadingComments":" Settings that specify state for this message, which may include settings related to visibility or handling, and\n validation of this object in various circumstances.\n"},{"path":[7,4,2],"span":[418,7,37]},{"path":[7,4,6],"span":[437,2,18]},{"path":[7,4,1],"span":[437,19,22]},{"path":[7,4,3],"span":[437,25,29]},{"path":[7],"span":[441,0,459,1]},{"path":[7,5],"span":[443,2,39],"leadingComments":" Database engine persistence options specific to an individual document field.\n"},{"path":[7,5,2],"span":[441,7,35]},{"path":[7,5,6],"span":[443,2,25]},{"path":[7,5,1],"span":[443,26,31]},{"path":[7,5,3],"span":[443,34,38]},{"path":[7,6],"span":[446,2,34],"leadingComments":" Specifies options related to storage of this field in a tabular-style data engine.\n"},{"path":[7,6,2],"span":[441,7,35]},{"path":[7,6,6],"span":[446,2,19]},{"path":[7,6,1],"span":[446,20,26]},{"path":[7,6,3],"span":[446,29,33]},{"path":[7,7],"span":[449,2,38],"leadingComments":" Specifies options related to storage of a sub-message-typed field.\n"},{"path":[7,7,2],"span":[441,7,35]},{"path":[7,7,6],"span":[449,2,19]},{"path":[7,7,1],"span":[449,20,30]},{"path":[7,7,3],"span":[449,33,37]},{"path":[7,8],"span":[452,2,31],"leadingComments":" Settings that specify state for this field, including validation settings, as applicable.\n"},{"path":[7,8,2],"span":[441,7,35]},{"path":[7,8,6],"span":[452,2,18]},{"path":[7,8,1],"span":[452,19,23]},{"path":[7,8,3],"span":[452,26,30]},{"path":[7,9],"span":[455,2,19],"leadingComments":" Unique ID or path assigned to this field in a universally specified data model.\n"},{"path":[7,9,2],"span":[441,7,35]},{"path":[7,9,5],"span":[455,2,8]},{"path":[7,9,1],"span":[455,9,11]},{"path":[7,9,3],"span":[455,14,18]},{"path":[7,10],"span":[458,2,37],"leadingComments":" Specifies extended options related specifically to use with Cloud Spanner.\n"},{"path":[7,10,2],"span":[441,7,35]},{"path":[7,10,6],"span":[458,2,21]},{"path":[7,10,1],"span":[458,22,29]},{"path":[7,10,3],"span":[458,32,36]},{"path":[7],"span":[462,0,472,1]},{"path":[7,11],"span":[465,2,22],"leadingComments":" Human-readable label for a given enumeration value state. Optional, can be used by invoking code to generate labels\n for states in forms or other UI.\n"},{"path":[7,11,2],"span":[462,7,39]},{"path":[7,11,5],"span":[465,2,8]},{"path":[7,11,1],"span":[465,9,14]},{"path":[7,11,3],"span":[465,17,21]},{"path":[7,12],"span":[468,2,31],"leadingComments":" Aliases when decoding values of this type.\n"},{"path":[7,12,2],"span":[462,7,39]},{"path":[7,12,4],"span":[468,2,10]},{"path":[7,12,5],"span":[468,11,17]},{"path":[7,12,1],"span":[468,18,23]},{"path":[7,12,3],"span":[468,26,30]},{"path":[7,13],"span":[471,2,32],"leadingComments":" Settings that specify state for this enum value, including validation settings, as applicable.\n"},{"path":[7,13,2],"span":[462,7,39]},{"path":[7,13,6],"span":[471,2,18]},{"path":[7,13,1],"span":[471,19,24]},{"path":[7,13,3],"span":[471,27,31]},{"path":[7],"span":[474,0,480,1]},{"path":[7,14],"span":[476,2,34],"leadingComments":" Specifies a special role, if applicable, for a given enumerated type.\n"},{"path":[7,14,2],"span":[474,7,34]},{"path":[7,14,6],"span":[476,2,16]},{"path":[7,14,1],"span":[476,17,26]},{"path":[7,14,3],"span":[476,29,33]},{"path":[7,15],"span":[479,2,38],"leadingComments":" Settings that specify state for this enum value, including validation settings, as applicable.\n"},{"path":[7,15,2],"span":[474,7,34]},{"path":[7,15,6],"span":[479,2,18]},{"path":[7,15,1],"span":[479,19,30]},{"path":[7,15,3],"span":[479,33,37]}]},"syntax":"proto3","bufExtension":{"isImport":false,"moduleInfo":{"name":{"remote":"buf.build","owner":"elide","repository":"v3"}},"isSyntaxUnspecified":false}}]}